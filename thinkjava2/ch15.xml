<chapter id="conway">
  <title>Arrays of Arrays</title><para>The last two chapters of this book use 2D graphics to illustrate more advanced object-oriented concepts. If you haven’t yet read <xref linkend="graphics"/>, you might want to read it now and get familiar with the <literal moreinfo="none">Canvas</literal>, <literal moreinfo="none">Color</literal>, and <literal moreinfo="none">Graphics</literal> classes from the <literal moreinfo="none">java.awt</literal> package. In this chapter we use these classes to draw images and animations, and to run graphical simulations. </para><sect1 id="a0000010961" remap="section">
  <title>Conway’s Game of Life</title>
    <para><emphasis>The Game of Life</emphasis>, or GoL for short, was developed by John Conway and popularized in 1970 in Martin Gardner’s column in Scientific American. Conway calls it a “zero-player game” because no players are needed to choose strategies or make decisions. After you set up the initial conditions, you watch the game play itself. That turns out to be more interesting than it sounds; you can read about it at <ulink url="http://en.wikipedia.org/wiki/Conway’s_Game_of_Life"/>. </para>
  
  <figure id="fig..glider" float="False">
    <title>A “Glider” in the Game of Life.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/glider.png"></imagedata>
  </imageobject>
</mediaobject></figure>
<para>The game board is a two-dimensional grid of square cells. Each cell is either “alive” or “dead”; the color of the cell indicates its state. <xref linkend="fig..glider"/> shows an example grid configuration; the five black cells are alive. </para><para><indexterm significance="normal">
  <primary>neighbor</primary>

</indexterm>The game proceeds in time steps, during which each cell interacts with its neighbors in the eight adjacent cells. At each time step, the following rules are applied: </para><orderedlist inheritnum="ignore" continuation="restarts">
  
  <listitem><para>A live cell with fewer than two live neighbors dies, as if by underpopulation. </para><para>A live cell with more than three live neighbors dies, as if by overpopulation. </para><para>A dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. </para></listitem>
  
</orderedlist><para><indexterm significance="normal">
  <primary>stable configuration</primary>

</indexterm>Notice some consequences of these rules. If you start with a single live cell, it dies. If all cells are dead, no cells come to life. But if you have four cells in a square, they keep each other alive, so that’s a “stable” configuration. </para><para>Another initial configuration is shown in <xref linkend="fig..blinker"/>. If you start with three horizontal cells, the center cell lives, the left and right cells die, and the top and bottom cells come to life. The result after the first time step is three vertical cells. </para><para>During the next time step, the center cell lives, the top and bottom cells die, and the left and right cells come to life. The result is three horizontal cells, so we’re back where we started, and the cycle repeats forever. </para>
  
  <figure id="fig..blinker" float="False">
    <title>A “Blinker” in the Game of Life.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/blinker-0.png"></imagedata>
  </imageobject>
</mediaobject> 
  
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/img-0001.png" contentwidth="74px" contentdepth="27px"></imagedata>
    </imageobject>
    <textobject>
      <phrase>\raisebox{38pt}{~ $\longrightarrow $~ }</phrase>
    </textobject>
  </mediaobject>
 <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/blinker-1.png"></imagedata>
  </imageobject>
</mediaobject> 
  
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/img-0001.png" contentwidth="74px" contentdepth="27px"></imagedata>
    </imageobject>
    <textobject>
      <phrase>\raisebox{38pt}{~ $\longrightarrow $~ }</phrase>
    </textobject>
  </mediaobject>
 <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/blinker-0.png"></imagedata>
  </imageobject>
</mediaobject> 
  
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/img-0002.png" contentwidth="162px" contentdepth="27px"></imagedata>
    </imageobject>
    <textobject>
      <phrase>\raisebox{38pt}{~ $\longrightarrow $~  \ldots }</phrase>
    </textobject>
  </mediaobject></figure>
<para>Patterns like this are called “periodic”, because they repeat after a period of two or more time steps. But they are also considered stable, because the total number of live cells doesn’t grow over time. </para><para>Most simple starting configurations either die out quickly or reach a stable configuration. But there are a few starting conditions that display remarkable complexity. One of those is the R-pentomino: it starts with only five cells, runs for 1103 time steps, and ends in a stable configuration with 116 live cells (see <ulink url="http://www.conwaylife.com/wiki/R-pentomino"/>). </para><para>In the following sections, we’ll implement the Game of Life in Java. We’ll first implement the cells, then the grid of cells, and finally the game itself. </para>
</sect1><sect1 id="a0000011020" remap="section">
  <title>The Cell Class</title>
    <para>When drawing a cell, we’ll need to know its location on the screen and size in pixels. To represent the location, we use the <literal moreinfo="none">x</literal> and <literal moreinfo="none">y</literal> coordinates of the upper-left corner. And to represent the size, we use an integer, <literal moreinfo="none">size</literal>. </para><para>To represent the state of a cell, we use an integer, <literal moreinfo="none">state</literal>, which is <literal moreinfo="none">0</literal> for dead cells and <literal moreinfo="none">1</literal> for live cells. We could use a <literal moreinfo="none">boolean</literal> instead, but it’s good practice to design classes to be reusable (e.g., for other games that have more states). </para><para>Here is a <literal moreinfo="none">Cell</literal> class that declares these instance variables: </para><programlisting language="java" format="linespecific">public class Cell {
    private final int x;
    private final int y;
    private final int size;
    private int state;
}</programlisting><para>Notice that <literal moreinfo="none">x</literal>, <literal moreinfo="none">y</literal>, and <literal moreinfo="none">size</literal> are constants. Once the cell is created, we don’t want it to move or change size. But <literal moreinfo="none">state</literal> can and should change, so it is not a constant. </para><para>The next step is to write a constructor. Here’s one that takes <literal moreinfo="none">x</literal>, <literal moreinfo="none">y</literal>, and <literal moreinfo="none">size</literal> as parameters, and sets <literal moreinfo="none">state</literal> to a default value. </para><programlisting language="java" format="linespecific">public Cell(int x, int y, int size) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.state = 0;
}</programlisting><para>The following method draws a cell. Like the <literal moreinfo="none">paint</literal> method in <xref linkend="graphics"/>, it takes a graphics context as a parameter. </para><programlisting language="java" format="linespecific">public static final Color[] COLORS = {Color.WHITE, Color.BLACK};

public void draw(Graphics g) {
    g.setColor(COLORS[state]);
    g.fillRect(x + 1, y + 1, size - 1, size - 1);
    g.setColor(Color.LIGHT_GRAY);
    g.drawRect(x, y, size, size);
}</programlisting><para>The <literal moreinfo="none">draw</literal> method uses the state of the cell to select a color from an array of <literal moreinfo="none">Color</literal> objects. Then it uses to <literal moreinfo="none">fillRect</literal> to draw the center of the cell and <literal moreinfo="none">drawRect</literal> to draw a light gray border. </para><para>We also need methods to get and set the cell’s state. We could just provide <literal moreinfo="none">getState</literal> and <literal moreinfo="none">setState</literal>, but the code will be more readable if we provide methods customized for the Game of Life: </para><programlisting language="java" format="linespecific">public boolean isOff() {
    return state == 0;
}

public boolean isOn() {
    return state == 1;
}

public void turnOff() {
    state = 0;
}

public void turnOn() {
    state = 1;
}</programlisting></sect1><sect1 id="a0000011085" remap="section">
  <title>Two-Dimensional Arrays</title>
    <para><indexterm significance="normal">
  <primary>multidimensional array</primary>

</indexterm>To represent a grid of cells, we can use a <emphasis role="bold">multidimensional array</emphasis>. To create a two-dimensional (2D) array, we specify the number of rows and columns: </para><programlisting language="java" format="linespecific">int rows = 4;
int cols = 3;
Cell[][] array = new Cell[rows][cols];</programlisting><para>The result is an array with 4 rows and 3 columns. Initially, the elements of the array are <literal moreinfo="none">null</literal>. We can fill the array with <literal moreinfo="none">Cell</literal> objects like this: </para><programlisting language="java" format="linespecific">for (int r = 0; r &lt; rows; r++) {
    int y = r * size;
    for (int c = 0; c &lt; cols; c++) {
        int x = c * size;
        array[r][c] = new Cell(x, y, size);
    }
}</programlisting><para>The loop variables <literal moreinfo="none">r</literal> and <literal moreinfo="none">c</literal> are the row and column indexes of the cells. The variables <literal moreinfo="none">x</literal> and <literal moreinfo="none">y</literal> are the coordinates. For example, if <literal moreinfo="none">size</literal> is 10 pixels, the cell at index (1, 2) would be at coordinates (10, 20) on the screen. </para><para>In Java, a 2D array is really an array of arrays. You can think of it as an array of rows, where each row is an array. <xref linkend="fig..2D-array"/> shows what it looks like. </para>
  
  <figure id="fig..2D-array" float="False">
    <title>Storing rows and columns with a 2D array.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/2D-array.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para><indexterm significance="normal">
  <primary>row-major order</primary>

</indexterm>When we write <literal moreinfo="none">array[r][c]</literal>, Java uses the first index to select a row and the second index to select an element from the row. This way of representing two-dimensional data is know as <emphasis role="bold">row-major order</emphasis>. </para>
</sect1><sect1 id="a0000011125" remap="section">
  <title>The GridCanvas Class</title>
    <para>Now that we have a <literal moreinfo="none">Cell</literal> class and a way to represent a 2D array of cells, we can write a class to represent a grid of cells. We encapsulate the code from the previous section and generalize it to construct a grid with any number of rows and columns: </para><programlisting language="java" format="linespecific">public class GridCanvas extends Canvas {
    private Cell[][] array;

    public GridCanvas(int rows, int cols, int size) {
        array = new Cell[rows][cols];
        for (int r = 0; r &lt; rows; r++) {
            int y = r * size;
            for (int c = 0; c &lt; cols; c++) {
                int x = c * size;
                array[r][c] = new Cell(x, y, size);
            }
        }

        // set the canvas size
        setSize(cols * size, rows * size);
    }
}</programlisting><para><indexterm significance="normal">
  <primary>IS-A</primary>

</indexterm><indexterm significance="normal">
  <primary>HAS-A</primary>

</indexterm><indexterm significance="normal">
  <primary>Graphics</primary>

</indexterm>Using vocabulary from the previous chapter, <literal moreinfo="none">GridCanvas</literal> “is a” <literal moreinfo="none">Canvas</literal> that “has a” two-dimensional array of cells. By extending the <literal moreinfo="none">Canvas</literal> class from <literal moreinfo="none">java.awt</literal>, we inherit methods for drawing graphics on the screen. </para><para>In fact, the code is surprisingly straightforward: to draw the grid, we simply draw each cell. We use nested <literal moreinfo="none">for</literal> loops to traverse the 2D array: </para><programlisting language="java" format="linespecific">public void draw(Graphics g) {
    for (Cell[] row : array) {
        for (Cell cell : row) {
            cell.draw(g);
        }
    }
}</programlisting><para>The outer loop traverses the rows; the inner loop traverses the cells in each row. You can almost read this method in English: “For each <literal moreinfo="none">row</literal> in the <literal moreinfo="none">array</literal>, and for each <literal moreinfo="none">cell</literal> in the <literal moreinfo="none">row</literal>, draw the <literal moreinfo="none">cell</literal> in the graphics context.” Each cell contains its coordinates and size, so it knows how to draw itself. </para><para>Classes that extend <literal moreinfo="none">Canvas</literal> are supposed to provide a method called <literal moreinfo="none">paint</literal> that “paints” the contents of the <literal moreinfo="none">Canvas</literal>. It gets invoked when the <literal moreinfo="none">Canvas</literal> is created and any time it needs to be redrawn, for example, when its window is moved or resized. </para><para>Here’s the <literal moreinfo="none">paint</literal> method for <literal moreinfo="none">GridCanvas</literal>. When the window management system calls <literal moreinfo="none">paint</literal>, <literal moreinfo="none">paint</literal> calls <literal moreinfo="none">draw</literal>, which draws the cells. </para><programlisting language="java" format="linespecific">public void paint(Graphics g) {
    draw(g);
}</programlisting></sect1><sect1 id="a0000011181" remap="section">
  <title>Other Grid Methods</title>
    <para>In addition to <literal moreinfo="none">draw</literal> and <literal moreinfo="none">paint</literal>, the <literal moreinfo="none">Grid</literal> class provides methods for working with the grid itself. <literal moreinfo="none">numRows</literal> and <literal moreinfo="none">numCols</literal> return the number of rows and columns. We can get this information from the 2D array, using <literal moreinfo="none">length</literal>: </para><programlisting language="java" format="linespecific">public int numRows() {
    return array.length;
}

public int numCols() {
    return array[0].length;
}</programlisting><para>Because we are using row-major order, the 2D array is an array of rows. <literal moreinfo="none">numRows</literal> simply returns the length of the rows array. <literal moreinfo="none">numCols</literal> returns the length of the first row, which is the number of columns. Since the rows all have the same length, we only have to check one. </para><para><literal moreinfo="none">GridCanvas</literal> also provides a method that gets the <literal moreinfo="none">Cell</literal> at a given location, and for convenience when starting the game, a method that turns on the <literal moreinfo="none">Cell</literal> at a given location. </para><programlisting language="java" format="linespecific">public Cell getCell(int r, int c) {
    return array[r][c];
}

public void turnOn(int r, int c) {
    array[r][c].turnOn();
}</programlisting></sect1><sect1 id="conwaymain" remap="section">
  <title>Starting the Game</title><para>Now we’re ready to implement the game. To encapsulate the rules of GoL, we define a class named <literal moreinfo="none">Conway</literal>. The <literal moreinfo="none">Conway</literal> class “has a” <literal moreinfo="none">GridCanvas</literal> that represents the state of the game. </para><para>This constructor makes a <literal moreinfo="none">GridCanvas</literal> with 5 rows and 10 columns, with cells that are 20 pixels wide and high. It then sets up the initial conditions. </para><programlisting language="java" format="linespecific">public class Conway {
    private GridCanvas grid;

    public Conway() {
        grid = new GridCanvas(5, 10, 20);
        grid.turnOn(2, 1);
        grid.turnOn(2, 2);
        grid.turnOn(2, 3);
        grid.turnOn(1, 7);
        grid.turnOn(2, 7);
        grid.turnOn(3, 7);
    }
}</programlisting><para>Before we implement the rest of the game, we’ll write a <literal moreinfo="none">main</literal> method that creates a <literal moreinfo="none">Conway</literal> object and displays it. We can use this method to test <literal moreinfo="none">Cell</literal> and <literal moreinfo="none">GridCanvas</literal>, and to develop the other methods we need. </para><programlisting language="java" format="linespecific">public static void main(String[] args) {
    String title = "Conway's Game of Life";
    Conway game = new Conway();
    JFrame frame = new JFrame(title);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setResizable(false);
    frame.add(game.grid);
    frame.pack();
    frame.setVisible(true);
    game.mainloop();
}</programlisting><para><indexterm significance="normal">
  <primary>JFrame</primary>

</indexterm>After constructing the <literal moreinfo="none">game</literal> object, <literal moreinfo="none">main</literal> constructs a <literal moreinfo="none">JFrame</literal>, which creates a window on the screen. The <literal moreinfo="none">JFrame</literal> is configured to exit the program when closed. Resizing the window is disabled. </para><para><literal moreinfo="none">main</literal> then adds the <literal moreinfo="none">GridCanvas</literal> inside the frame, resizes (“packs”) the frame to fit the canvas, and makes the frame visible. <xref linkend="fig..conway"/> shows the result. </para>
  
  <figure id="fig..conway" float="False">
    <title>Screenshot of the initial <literal moreinfo="none">Conway</literal> application.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/conway.png"></imagedata>
  </imageobject>
</mediaobject></figure>

</sect1><sect1 id="mainloop" remap="section">
  <title>The Simulation Loop</title><para>At the end of <literal moreinfo="none">main</literal>, we call <literal moreinfo="none">mainloop</literal>, which uses a <literal moreinfo="none">while</literal> loop to simulate the time steps of the Game of Life. Here’s a rough draft of this method: </para><programlisting language="java" format="linespecific">private void mainloop() {
    while (true) {
        this.update();
        grid.repaint();
        Thread.sleep(500);    // compiler error
    }
}</programlisting><para>During each time step, we update the state of the game and repaint the <literal moreinfo="none">grid</literal>. We will present the <literal moreinfo="none">update</literal> method in <xref linkend="sec..update"/>. </para><para><literal moreinfo="none">repaint</literal> comes from the <literal moreinfo="none">Canvas</literal> class. By default, it calls the <literal moreinfo="none">paint</literal> method we provided, which calls <literal moreinfo="none">draw</literal>. The reason we use it here is that <literal moreinfo="none">repaint</literal> does not require a <literal moreinfo="none">Graphics</literal> object as a parameter. </para><para><indexterm significance="normal">
  <primary>Thread.sleep</primary>

</indexterm><indexterm significance="normal">
  <primary>sleep</primary>

</indexterm><literal moreinfo="none">Thread.sleep(500)</literal> causes the program to “sleep” for 500 milliseconds, or a half second. Otherwise the program would run so fast we would not be able to see the animation. </para><para><indexterm significance="normal">
  <primary>InterruptedException</primary>

</indexterm><indexterm significance="normal">
  <primary>Exception</primary>
<secondary>Interrupted</secondary>
</indexterm>There’s just one problem: compiling this code results in the error “unreported exception InterruptedException”. This message means we need to do some exception handling. </para>
</sect1><sect1 id="a0000011313" remap="section">
  <title>Exception Handling</title>
    <para>So far, the only exceptions we have seen are run-time errors like “array index out of bounds” and “null pointer”. When one of these exceptions occur, Java displays a message and ends the program. </para><para><indexterm significance="normal">
  <primary>try</primary>

</indexterm><indexterm significance="normal">
  <primary>catch</primary>

</indexterm><indexterm significance="normal">
  <primary>Statement</primary>
<secondary>try</secondary>
</indexterm><indexterm significance="normal">
  <primary>Statement</primary>
<secondary>catch</secondary>
</indexterm>If you don’t want the program to end, you can handle exceptions with a <literal moreinfo="none">try</literal>-<literal moreinfo="none">catch</literal> statement. The syntax is similar to an <literal moreinfo="none">if</literal>-<literal moreinfo="none">else</literal> statement, and the logic is, too. Here’s what it looks like: </para><programlisting language="java" format="linespecific">try {
    Thread.sleep(500);
} catch (InterruptedException e) {
    // do nothing
}</programlisting><para>First, Java runs the code in the try block, which calls <literal moreinfo="none">Thread.sleep</literal> in this example. If an <literal moreinfo="none">InterruptedException</literal> occurs during the try block, Java executes the catch block. In this example, the catch block contains a comment, so it doesn’t do anything. </para><para>If a different exception occurs during the try block, Java does whatever it would do otherwise, which is probably to display a message and end the program. If no exceptions occur during the try block, the catch block doesn’t run and the program continues. </para><para>In this example, the effect of the <literal moreinfo="none">try</literal>-<literal moreinfo="none">catch</literal> statement is to ignore an “interrupted” exception if it occurs. As an alternative, we could use the catch block to display a customized message, end the program, or handle the exception in whatever way is appropriate. For example, if user input causes an exception, we could catch the exception and prompt the user to try again later. </para><para>There’s more to learn about exception handling. You can read about exceptions in the Java tutorials at <ulink url="https://thinkjava.org/exceptions"/>. </para>
</sect1><sect1 id="a0000011340" remap="section">
  <title>Counting Neighbors</title>
    <para><indexterm significance="normal">
  <primary>neighbor</primary>

</indexterm>Now that you know about <literal moreinfo="none">try</literal> and <literal moreinfo="none">catch</literal>, we can use them to implement a useful method in <literal moreinfo="none">GridCanvas</literal>. Part of the GoL logic is to count the number of live neighbors. Most cells have eight neighbors, as shown in <xref linkend="fig..neighbors"/>. </para><para>However, cells on the edges and in the corners have fewer neighbors. If we try to count all possible neighbors, we’ll go out of bounds. The following method uses a <literal moreinfo="none">try</literal>-<literal moreinfo="none">catch</literal> statement to deal with these special cases. </para><programlisting language="java" format="linespecific">public int test(int r, int c) {
    try {
        if (array[r][c].isOn()) {
            return 1;
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        // cell doesn't exist
    }
    return 0;
}</programlisting><figure id="fig..neighbors" float="False">
    <title>Cells in the interior of the grid have eight neighbors. Cells in the corners and along the edges have fewer neighbors.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/grid.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para>The <literal moreinfo="none">test</literal> method takes a row index, <literal moreinfo="none">r</literal>, and a column index, <literal moreinfo="none">c</literal>. It tries to look up the <literal moreinfo="none">Cell</literal> at that location. If both of the indexes are in bounds, the <literal moreinfo="none">Cell</literal> exists. In that case, <literal moreinfo="none">test</literal> returns 1 if the <literal moreinfo="none">Cell</literal> is on. Otherwise, it skips the catch block and returns 0. </para><para>If either of the indexes is out of bounds, the array lookup throws an exception, but the catch block ignores it. Then <literal moreinfo="none">test</literal> resumes and returns 0. So the non-existent cells around the perimeter are considered to be off. </para><para>Now we can use <literal moreinfo="none">test</literal> to implement <literal moreinfo="none">countAlive</literal>, which takes a grid location, <literal moreinfo="none">(r, c)</literal>, and returns the number of live neighbors surrounding that location. </para><programlisting language="java" format="linespecific">private int countAlive(int r, int c) {
    int count = 0;
    count += grid.test(r - 1, c - 1);
    count += grid.test(r - 1, c);
    count += grid.test(r - 1, c + 1);
    count += grid.test(r, c - 1);
    count += grid.test(r, c + 1);
    count += grid.test(r + 1, c - 1);
    count += grid.test(r + 1, c);
    count += grid.test(r + 1, c + 1);
    return count;
}</programlisting><para>Because <literal moreinfo="none">test</literal> handles “out of bounds” exceptions, <literal moreinfo="none">countAlive</literal> works for any values of <literal moreinfo="none">r</literal> and <literal moreinfo="none">c</literal>. </para>
</sect1><sect1 id="sec..update" remap="section">
  <title>Updating the Grid</title><para>Now we are ready to write <literal moreinfo="none">update</literal>, which gets invoked each time through the simulation loop. It uses the GoL rules to compute the state of the grid after the next time step. </para><programlisting language="java" format="linespecific">public void update() {
    int[][] counts = countNeighbors();
    updateGrid(counts);
}</programlisting><para>The rules of GoL specify that you have to update the cells “simultaneously”; that is, you have to count the neighbors for all cells before you can update any of them. </para><para>We do that by traversing the grid twice: first, <literal moreinfo="none">countNeighbors</literal> counts the live neighbors for each cell and puts the results in an array named <literal moreinfo="none">counts</literal>; second, <literal moreinfo="none">updateGrid</literal> updates the cells. Here’s <literal moreinfo="none">countNeighbors</literal>: </para><programlisting language="java" format="linespecific">private int[][] countNeighbors() {
    int rows = grid.numRows();
    int cols = grid.numCols();

    int[][] counts = new int[rows][cols];
    for (int r = 0; r &lt; rows; r++) {
        for (int c = 0; c &lt; cols; c++) {
            counts[r][c] = countAlive(r, c);
        }
    }
    return counts;
}</programlisting><para><literal moreinfo="none">countNeighbors</literal> traverses the cells in the grid and uses <literal moreinfo="none">countAlive</literal> from the previous section to count the neighbors. The return value is a 2D array of integers with the same size as <literal moreinfo="none">grid</literal>. <xref linkend="fig..countNeigh"/> illustrates an example. </para>
  
  <figure id="fig..countNeigh" float="False">
    <title>The result of <literal moreinfo="none">countNeighbors</literal> for the grid in <xref linkend="conwaymain"/>.</title>
      <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/conway.png"></imagedata>
  </imageobject>
</mediaobject><programlisting format="linespecific">{{0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
 {1, 2, 3, 2, 1, 0, 2, 1, 2, 0},
 {1, 1, 2, 1, 1, 0, 3, 2, 3, 0},
 {1, 2, 3, 2, 1, 0, 2, 1, 2, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 1, 0}}</programlisting></figure>
<para>In contrast to the <literal moreinfo="none">draw</literal> method of <literal moreinfo="none">GridCanvas</literal>, which uses enhanced <literal moreinfo="none">for</literal> loops, <literal moreinfo="none">countNeighbors</literal> uses standard <literal moreinfo="none">for</literal> loops. The reason is that, in this example, we need the indexes <literal moreinfo="none">r</literal> and <literal moreinfo="none">c</literal> to store the neighbor counts. </para><para><literal moreinfo="none">updateGrid</literal> uses <literal moreinfo="none">getCell</literal> to select each <literal moreinfo="none">Cell</literal> in the grid and <literal moreinfo="none">updateCell</literal> to do the update. </para><programlisting language="java" format="linespecific">private void updateGrid(int[][] counts) {
    int rows = grid.numRows();
    int cols = grid.numCols();

    for (int r = 0; r &lt; rows; r++) {
        for (int c = 0; c &lt; cols; c++) {
            Cell cell = grid.getCell(r, c);
            updateCell(cell, counts[r][c]);
        }
    }
}</programlisting><para><literal moreinfo="none">updateCell</literal> implements the GoL rules: if the cell is alive, it dies if it has fewer than 2 or more than 3 neighbors; if the cell is dead, it comes to life if it has exactly 3. </para><programlisting language="java" format="linespecific">private static void updateCell(Cell cell, int count) {
    if (cell.isOn()) {
        if (count &lt; 2 || count &gt; 3) {
            cell.turnOff();
        }
    } else {
        if (count == 3) {
            cell.turnOn();
        }
    }
}</programlisting><para>Notice that <literal moreinfo="none">updateGrid</literal> and <literal moreinfo="none">updateCell</literal> are both <literal moreinfo="none">private</literal>, because they are helper methods not intended to be invoked from outside the class. <literal moreinfo="none">updateCell</literal> is also <literal moreinfo="none">static</literal>, because it does not depend on <literal moreinfo="none">grid</literal>. </para><para>Now our implementation of the Game of Life is complete. We think it’s is pretty fun, and we hope you agree. But more importantly, this example is meant to demonstrate the use of 2D arrays and an object-oriented design that’s a little more substantial than previous chapters. </para>
</sect1><sect1 id="a0000011486" remap="section">
  <title>Vocabulary</title>
    <variablelist>
  <varlistentry>
    <term>multidimensional array:</term>
      <listitem><para><indexterm significance="normal">
  <primary>multidimensional array</primary>

</indexterm>An array with more than one dimension; two-dimensional arrays are “arrays of arrays”. </para></listitem>
  </varlistentry><varlistentry>
    <term>row-major order:</term>
      <listitem><para><indexterm significance="normal">
  <primary>row-major order</primary>

</indexterm>Storing data in a two-dimensional array first by rows and then by columns. </para></listitem>
  </varlistentry>
</variablelist>
</sect1><sect1 id="a0000011493" remap="section">
  <title>Exercises</title>
    <para>The code for this chapter is in the <literal moreinfo="none">ch15</literal> directory of <literal moreinfo="none">ThinkJavaCode2</literal>. See <xref linkend="code"/> for instructions on how to download the repository. Before you start the exercises, we recommend that you compile and run the examples. </para><para><example id="a0000011502" role="exercise">
  <title/>
  <para> In <literal moreinfo="none">GridCanvas</literal>, write a method named <literal moreinfo="none">countOn</literal> that returns the total number of cells that are “on”. This method can be used, for example, to track the population in Game of Life over time. </para>
</example> </para><para><example id="a0000011508" role="exercise">
  <title/>
  <para> In our version of the Game of Life, the grid has a finite size. As a result, moving objects such as gliders either crash into the wall or go out of bounds. </para><para>An interesting variation of the Game of Life is a “toroidal” grid, meaning that the cells “wrap around” on the edges. Modify the <literal moreinfo="none">test</literal> method of <literal moreinfo="none">GridCanvas</literal> so that the coordinates <literal moreinfo="none">r</literal> and <literal moreinfo="none">c</literal> map to the opposite side of the grid if they are too low or two high. </para><para>Run your code with a Glider (see <xref linkend="fig..glider"/>) to see if it works. You can initialize the Glider by modifying the constructor in the <literal moreinfo="none">Conway</literal> class, or by reading it from a file (see the next exercise). </para>
</example> </para><para><example id="a0000011525" role="exercise">
  <title/>
  <para>The “LifeWiki” <ulink url="http://conwaylife.com/wiki/"/> has a fascinating collection of patterns for the Game of Life. These patterns are stored in a file format that is easy to read, in files with the suffix “<literal remap="verb" moreinfo="none">.cells</literal>”. </para><para>For example, here is an 8x10 grid with a glider near the upper-left corner: </para><programlisting format="linespecific">!Name: Glider
..........
..O.......
...O......
.OOO......
..........
..........
..........
..........</programlisting><para>Lines that begin with <literal moreinfo="none">!</literal> are comments and should be ignored. The rest of the file describes the grid, row by row. A period represents a dead cell, and an uppercase O represents a live cell. See <ulink url="http://conwaylife.com/wiki/Plaintext"/> for more examples. </para><orderedlist inheritnum="ignore" continuation="restarts">
  
  <listitem><para>Create a plain text file with the contents shown above, and save the file as <literal remap="verb" moreinfo="none">glider.cells</literal> in the same directory as your code. </para></listitem>
  
  <listitem><para>Define a constructor for the <literal moreinfo="none">Conway</literal> class that takes a string representing the name (or path) of a “.cells” file. Here is a starting point: </para><programlisting language="java" format="linespecific">public Conway(String path) {
    File file = new File(path);
    Scanner scan = new Scanner(file);
}</programlisting></listitem>
  
  <listitem><para>Modify the main method to invoke the constructor as follows: </para><programlisting language="java" format="linespecific">Conway game = new Conway("glider.cells");</programlisting></listitem>
  
  <listitem><para>Handle the <literal moreinfo="none">FileNotFoundException</literal> that may be thrown when creating a <literal moreinfo="none">Scanner</literal> for a <literal moreinfo="none">File</literal> by invoking <literal moreinfo="none">printStackTrace</literal> on the exception object and calling <literal moreinfo="none">System.exit()</literal> with a status of 1, indicating an error. </para></listitem>
  
  <listitem><para>Continue implementing the constructor by reading all non-comment lines into an <literal moreinfo="none">ArrayList</literal> using <literal moreinfo="none">hasNextLine</literal> and <literal moreinfo="none">nextLine</literal> of the <literal moreinfo="none">Scanner</literal>. </para></listitem>
  
  <listitem><para>Determine the number of rows and columns of the grid by examining the <literal moreinfo="none">ArrayList</literal> contents. </para></listitem>
  
  <listitem><para>Create and initialize a <literal moreinfo="none">GridCanvas</literal> based on the <literal moreinfo="none">ArrayList</literal>. </para></listitem>
  
</orderedlist><para>Once your constructor is working, you will be able to run many of the patterns on the LifeWiki. You might want to add a margin of empty cells around the initial pattern, to give it room to grow. </para>
</example> </para><para><example id="a0000011585" role="exercise">
  <title/>
  <para> Some files on the LifeWiki use “Run Length Encoding” (RLE) instead of plain text. The basic idea of RLE is to describe the number of dead and alive cells, rather than type out each individual cell. </para><para>For example, <literal remap="verb" moreinfo="none">glider.cells</literal> from the previous exercise could be represented this way with RLE: </para><programlisting format="linespecific">#C Name: Glider
x = 10, y = 8
$2bo$3bo$b3o!</programlisting><para>The first line specifies <literal remap="verb" moreinfo="none">x</literal> (the number of columns) and <literal remap="verb" moreinfo="none">y</literal> (the number of rows). Subsequent lines consist of the letters <literal remap="verb" moreinfo="none">b</literal> (dead), <literal remap="verb" moreinfo="none">o</literal> (alive), and <literal remap="verb" moreinfo="none">$</literal> (end of line), optionally preceded by a count. The pattern ends with <literal remap="verb" moreinfo="none">!</literal>, after which any remaining file contents are ignored. </para><para>Lines beginning with <literal moreinfo="none">#</literal> have special meaning and are not part of the pattern. For example, <literal moreinfo="none">#C</literal> is a comment line. You can read more about RLE format on <ulink url="http://conwaylife.com/wiki/RLE"/>. </para><orderedlist inheritnum="ignore" continuation="restarts">
  
  <listitem><para>Create a plain text file with the contents shown above, and save the file as <literal remap="verb" moreinfo="none">glider.rle</literal> in the same directory as your code. </para></listitem>
  
  <listitem><para>Modify your constructor from the previous exercise to check the last three characters of the <literal moreinfo="none">path</literal>. If they are <literal moreinfo="none">"rle"</literal>, then you will need to process the file as RLE. Otherwise, assume the file is in “.cells” format. </para></listitem>
  
  <listitem><para>In the end, your constructor should be able to read and initialize grids in both formats. Test your constructor by modifying the <literal moreinfo="none">main</literal> method to read different files. </para></listitem>
  
</orderedlist>
</example> </para>
</sect1>
</chapter>

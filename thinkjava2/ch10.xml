<chapter id="mutable">
  <title>Mutable Objects</title><para><indexterm significance="normal">
  <primary>String class</primary>

</indexterm><indexterm significance="normal">
  <primary>type</primary>
<secondary>String</secondary>
</indexterm>As you learned in the previous chapter, an object is a collection of data that provides a set of methods. For example, a <literal moreinfo="none">String</literal> is a collection of characters that provides methods like <literal moreinfo="none">charAt</literal> and <literal moreinfo="none">substring</literal>. </para><para>In this chapter, we’ll explore two new types of objects: <literal moreinfo="none">Point</literal> and <literal moreinfo="none">Rectangle</literal>. We’ll see how to write methods that take objects as parameters and produce objects as return values. </para><para>We will also take a first look at the source code for the Java library. </para><sect1 id="point" remap="section">
  <title>Point Objects</title><para><indexterm significance="normal">
  <primary>coordinate</primary>

</indexterm>In math, 2D “points” are often written in parentheses with a comma separating the coordinates. For example, <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo>(</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>0</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:math></inlineequation> indicates the origin, and <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo>(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math></inlineequation> indicates the point <emphasis role="math">x</emphasis> units to the right and <emphasis role="math">y</emphasis> units up from the origin. </para><para><indexterm significance="normal">
  <primary>AWT</primary>

</indexterm><indexterm significance="normal">
  <primary>java.awt</primary>

</indexterm><indexterm significance="normal">
  <primary>Point</primary>

</indexterm><indexterm significance="normal">
  <primary>class</primary>
<secondary>Point</secondary>
</indexterm>The <literal moreinfo="none">java.awt</literal> package provides a class named <literal moreinfo="none">Point</literal> that represents a location in a Cartesian plane. In order to use the <literal moreinfo="none">Point</literal> class, you have to import it: </para><programlisting language="java" format="linespecific">import java.awt.Point;</programlisting><para><indexterm significance="normal">
  <primary>new</primary>

</indexterm><indexterm significance="normal">
  <primary>operator</primary>
<secondary>new</secondary>
</indexterm>Then, to create a new point, you use the <literal moreinfo="none">new</literal> operator: </para><programlisting language="java" format="linespecific">Point blank;
blank = new Point(3, 4);</programlisting><para><indexterm significance="normal">
  <primary>memory diagram</primary>

</indexterm><indexterm significance="normal">
  <primary>diagram</primary>
<secondary>memory</secondary>
</indexterm><indexterm significance="normal">
  <primary>declaration</primary>

</indexterm><indexterm significance="normal">
  <primary>statement</primary>
<secondary>declaration</secondary>
</indexterm><indexterm significance="normal">
  <primary>reference</primary>

</indexterm>The first line declares that <literal moreinfo="none">blank</literal> has type <literal moreinfo="none">Point</literal>. The second line creates the new <literal moreinfo="none">Point</literal> with the coordinates <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>x</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math></inlineequation> and <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>y</mml:mi><mml:mo>=</mml:mo><mml:mn>4</mml:mn></mml:mrow></mml:math></inlineequation>. The result of the <literal moreinfo="none">new</literal> operator is a <emphasis>reference</emphasis> to the object. <xref linkend="fig.reference"/> shows the result. </para>
  
  <figure id="fig.reference" float="False">
    <title>Memory diagram showing a variable that refers to a <literal moreinfo="none">Point</literal> object.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/reference.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para>As usual, the name of the variable <literal moreinfo="none">blank</literal> appears outside the box, and its value appears inside the box. In this case, the value is a reference, which is represented with an arrow. The arrow points to the <literal moreinfo="none">Point</literal> object, which contains two variables, <literal moreinfo="none">x</literal> and <literal moreinfo="none">y</literal>. </para><para><indexterm significance="normal">
  <primary>attribute</primary>

</indexterm><indexterm significance="normal">
  <primary>dot notation</primary>

</indexterm>Variables that belong to an object are called <emphasis role="bold">attributes</emphasis>. In some documentation, you also see them called “fields”. To access an attribute of an object, Java uses <emphasis role="bold">dot notation</emphasis>. For example: </para><programlisting language="java" format="linespecific">int x = blank.x;</programlisting><para>The expression <literal moreinfo="none">blank.x</literal> means “go to the object <literal moreinfo="none">blank</literal> refers to, and get the value of the attribute <literal moreinfo="none">x</literal>.” In this case, we assign that value to a local variable named <literal moreinfo="none">x</literal>. </para><para>There is no conflict between the local variable <literal moreinfo="none">x</literal> and the attribute <literal moreinfo="none">x</literal>. The purpose of dot notation is to identify <emphasis>which</emphasis> variable you are referring to unambiguously. </para><para>You can use dot notation as part of an expression. For example: </para><programlisting language="java" format="linespecific">System.out.println(blank.x + ", " + blank.y);
int sum = blank.x * blank.x + blank.y * blank.y;</programlisting><para>The first line displays <literal moreinfo="none">3, 4</literal>. The second line calculates the value <literal moreinfo="none">25</literal>. </para>
</sect1><sect1 id="a0000007522" remap="section">
  <title>Objects as Parameters</title>
    <para><indexterm significance="normal">
  <primary>parameter</primary>

</indexterm><indexterm significance="normal">
  <primary>object</primary>
<secondary>as parameter</secondary>
</indexterm>You can pass objects as parameters in the usual way. For example: </para><programlisting language="java" format="linespecific">public static void printPoint(Point p) {
    System.out.println("(" + p.x + ", " + p.y + ")");
}</programlisting><para>This method takes a point as an argument and displays its attributes in parentheses. If you invoke <literal moreinfo="none">printPoint(blank)</literal>, it displays <literal moreinfo="none">(3, 4)</literal>. </para><para>As another example, we can rewrite the <literal moreinfo="none">distance</literal> method from <xref linkend="distance"/> so that it takes two <literal moreinfo="none">Point</literal>s as parameters instead of four <literal moreinfo="none">double</literal>s. </para><programlisting language="java" format="linespecific">public static double distance(Point p1, Point p2) {
    int dx = p2.x - p1.x;
    int dy = p2.y - p1.y;
    return Math.sqrt(dx * dx + dy * dy);
}</programlisting><para>Passing objects as parameters makes the source code more readable and less error-prone because related values are bundled together. </para><para>You actually don’t need to write a <literal moreinfo="none">distance</literal> method, because <literal moreinfo="none">Point</literal> objects already have one. To compute the distance between two points, we invoke <literal moreinfo="none">distance</literal> on one and pass the other as an argument. </para><programlisting language="java" format="linespecific">Point p1 = new Point(0, 0);
Point p2 = new Point(3, 4);
double dist = p1.distance(p2);  // dist is 5.0</programlisting><para>It turns out you don’t need the <literal moreinfo="none">printPoint</literal> method either. If you invoke <literal moreinfo="none">System.out.println(blank)</literal>, it prints the type of the object and the values of the attributes: </para><programlisting format="linespecific">java.awt.Point[x=3,y=4]</programlisting><para><indexterm significance="normal">
  <primary>toString</primary>

</indexterm><literal moreinfo="none">Point</literal> objects provide a method called <literal moreinfo="none">toString</literal> that returns a string representation of a point. When you call <literal moreinfo="none">println</literal> with objects, it <emphasis>automatically</emphasis> calls <literal moreinfo="none">toString</literal> and displays the result. </para>
</sect1><sect1 id="sec..Rectangle" remap="section">
  <title>Objects as Return Values</title><para><indexterm significance="normal">
  <primary>Rectangle</primary>

</indexterm><indexterm significance="normal">
  <primary>class</primary>
<secondary>Rectangle</secondary>
</indexterm>The <literal moreinfo="none">java.awt</literal> package also provides a class named <literal moreinfo="none">Rectangle</literal>. To use it, you have to import it: </para><programlisting language="java" format="linespecific">import java.awt.Rectangle;</programlisting><para><literal moreinfo="none">Rectangle</literal> objects are similar to points, but they have four attributes: <literal moreinfo="none">x</literal>, <literal moreinfo="none">y</literal>, <literal moreinfo="none">width</literal>, and <literal moreinfo="none">height</literal>. The following example creates a <literal moreinfo="none">Rectangle</literal> object and makes the variable <literal moreinfo="none">box</literal> refer to it: </para><programlisting language="java" format="linespecific">Rectangle box = new Rectangle(0, 0, 100, 200);</programlisting><para><xref linkend="fig.rectangle"/> shows the effect of this assignment. </para>
  
  <figure id="fig.rectangle" float="False">
    <title>Memory diagram showing a <literal moreinfo="none">Rectangle</literal> object.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/rectangle.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para>If you run <literal moreinfo="none">System.out.println(box)</literal>, you get: </para><programlisting format="linespecific">java.awt.Rectangle[x=0,y=0,width=100,height=200]</programlisting><para>Again, <literal moreinfo="none">println</literal> uses the <literal moreinfo="none">toString</literal> method provided by <literal moreinfo="none">Rectangle</literal>, which knows how to represent <literal moreinfo="none">Rectangle</literal> objects as strings. </para><para><indexterm significance="normal">
  <primary>return</primary>

</indexterm><indexterm significance="normal">
  <primary>statement</primary>
<secondary>return</secondary>
</indexterm>You can also write methods that return new objects. For example, <literal moreinfo="none">findCenter</literal> takes a <literal moreinfo="none">Rectangle</literal> as an argument and returns a <literal moreinfo="none">Point</literal> with the coordinates of the center of the rectangle: </para><programlisting language="java" format="linespecific">public static Point findCenter(Rectangle box) {
    int x = box.x + box.width / 2;
    int y = box.y + box.height / 2;
    return new Point(x, y);
}</programlisting><para>The return type of this method is <literal moreinfo="none">Point</literal>. The last line creates a new <literal moreinfo="none">Point</literal> object and returns a reference to it. </para>
</sect1><sect1 id="a0000007639" remap="section">
  <title>Rectangles are Mutable</title>
    <para><indexterm significance="normal">
  <primary>mutable</primary>

</indexterm><indexterm significance="normal">
  <primary>object</primary>
<secondary>mutable</secondary>
</indexterm>You can change the contents of an object by making an assignment to one of its attributes. For example, to “move” a rectangle without changing its size, you can modify the <literal moreinfo="none">x</literal> and <literal moreinfo="none">y</literal> values: </para><programlisting language="java" format="linespecific">Rectangle box = new Rectangle(0, 0, 100, 200);
box.x = box.x + 50;
box.y = box.y + 100;</programlisting><para>The result is shown in <xref linkend="fig.rectangle2"/>. </para>
  
  <figure id="fig.rectangle2" float="False">
    <title>Memory diagram showing updated attributes.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/rectangle2.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para><indexterm significance="normal">
  <primary>encapsulation</primary>

</indexterm><indexterm significance="normal">
  <primary>generalization</primary>

</indexterm>We can encapsulate this code in a method and generalize it to move the rectangle by any amount: </para><programlisting language="java" format="linespecific">public static void moveRect(Rectangle box, int dx, int dy) {
    box.x = box.x + dx;
    box.y = box.y + dy;
}</programlisting><para>The variables <literal moreinfo="none">dx</literal> and <literal moreinfo="none">dy</literal> indicate how far to move the rectangle in each direction. Invoking this method has the effect of modifying the <literal moreinfo="none">Rectangle</literal> that is passed as an argument. </para><programlisting language="java" format="linespecific">Rectangle box = new Rectangle(0, 0, 100, 200);
moveRect(box, 50, 100);  // now at (50, 100, 100, 200)</programlisting><para>Modifying objects by passing them as arguments to methods can be useful. But it can also make debugging difficult, because it is not always clear which method invocations modify their arguments. </para><para>Java provides a number of methods that operate on <literal moreinfo="none">Point</literal>s and <literal moreinfo="none">Rectangle</literal>s. For example, <literal moreinfo="none">translate</literal> has the same effect as <literal moreinfo="none">moveRect</literal>, but instead of passing the rectangle as an argument, you use dot notation: </para><programlisting language="java" format="linespecific">box.translate(50, 100);</programlisting><para>This line invokes the <literal moreinfo="none">translate</literal> method on the object that <literal moreinfo="none">box</literal> refers to, which modifies the object. </para><para><indexterm significance="normal">
  <primary>object-oriented</primary>

</indexterm>This syntax—using dot notation to invoke a method on an object, rather than passing it as a parameter—is more consistent with the style of object-oriented programming. </para>
</sect1><sect1 id="aliasing" remap="section">
  <title>Aliasing Revisited</title><para><indexterm significance="normal">
  <primary>reference</primary>

</indexterm>Remember that when you assign an object to a variable, you are assigning a <emphasis>reference</emphasis> to an object. It is possible to have multiple variables that refer to the same object. For example, this code creates two variables that refer to the same <literal moreinfo="none">Rectangle</literal>: </para><programlisting language="java" format="linespecific">Rectangle box1 = new Rectangle(0, 0, 100, 200);
Rectangle box2 = box1;</programlisting><para><xref linkend="fig.aliasing"/> shows the result: <literal moreinfo="none">box1</literal> and <literal moreinfo="none">box2</literal> refer to the same object, so any changes that affect one variable also affect the other. </para>
  
  <figure id="fig.aliasing" float="False">
    <title>Memory diagram showing two variables that refer to the same <literal moreinfo="none">Rectangle</literal> object.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/aliasing.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para>For example, the following code uses <literal moreinfo="none">grow</literal> to make <literal moreinfo="none">box1</literal> bigger by 50 units in all directions. It decreases <literal moreinfo="none">x</literal> and <literal moreinfo="none">y</literal> by 50, and it increases <literal moreinfo="none">height</literal> and <literal moreinfo="none">width</literal> by 100: </para><programlisting language="java" format="linespecific">box1.grow(50, 50);                // grow box1 (alias)</programlisting><para>The result is shown in <xref linkend="fig.aliasing2"/>. </para>
  
  <figure id="fig.aliasing2" float="False">
    <title>Memory diagram showing the effect of invoking <literal moreinfo="none">grow</literal>.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/aliasing2.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para>Now, if we print <literal moreinfo="none">box1</literal>, we are not surprised to see that it has changed. </para><programlisting language="java" format="linespecific">java.awt.Rectangle[x=-50,y=-50,width=200,height=300]</programlisting><para>And if we print <literal moreinfo="none">box2</literal>, we should not be surprised to see that it has changed, too, because it refers to the same object: </para><programlisting language="java" format="linespecific">java.awt.Rectangle[x=-50,y=-50,width=200,height=300]</programlisting><para>This scenario is called “aliasing” because a single object has multiple names, or aliases, that refer to it. </para><para>As you can tell from this simple example, code that involves aliasing can get confusing fast, and it can be difficult to debug. </para>
</sect1><sect1 id="src.zip" remap="section">
  <title>Java Library Source</title><para><indexterm significance="normal">
  <primary>library</primary>

</indexterm><indexterm significance="normal">
  <primary>source code</primary>

</indexterm>So far we have used several classes from the Java library, including <literal moreinfo="none">System</literal>, <literal moreinfo="none">String</literal>, <literal moreinfo="none">Scanner</literal>, <literal moreinfo="none">Math</literal>, and <literal moreinfo="none">Random</literal>. These classes are written in Java, so you can read the source code to see how they work. </para><para><indexterm significance="normal">
  <primary>src.zip</primary>

</indexterm>The Java library contains thousands of files, many of which are thousands of lines of code. That’s more than one person could read and understand fully, but don’t be intimidated! </para><para>Because it’s so large, the library source code is stored in a ZIP archive named <literal moreinfo="none">src.zip</literal>. If you have Java installed on your computer, you should already have this file somewhere. </para><itemizedlist>
  
    <listitem><para>On Linux, it’s likely under: <literal remap="verb" moreinfo="none">/usr/lib/jvm/.../lib</literal> If not, you might have to install the <literal moreinfo="none">openjdk-...-source</literal> package. </para></listitem>
  
    <listitem><para>On MacOS, it’s likely under: <literal remap="verb" moreinfo="none">/Library/Java/JavaVirtualMachines/.../Contents/Home/lib</literal> </para></listitem>
  
    <listitem><para>On Windows, it’s likely under: <literal remap="verb" moreinfo="none">C:\Program Files\Java\...\lib</literal> </para></listitem>
  
</itemizedlist><para>When you open (or unzip) the file, you will see folders that correspond to Java packages. For example, open the <literal moreinfo="none">java</literal> folder, and then open the <literal moreinfo="none">awt</literal> folder. (If you don’t see a <literal moreinfo="none">java</literal> folder at first, open the <literal moreinfo="none">java.desktop</literal> folder.) You should now see <literal moreinfo="none">Point.java</literal> and <literal moreinfo="none">Rectangle.java</literal>, along with the other classes in the <literal moreinfo="none">java.awt</literal> package. </para><para>Open <literal moreinfo="none">Point.java</literal> in your editor and skim through the file. It uses language features we haven’t discussed yet, so you probably won’t understand every line. But you can get a sense of what professional Java source code looks like by browsing through the library. </para><para><indexterm significance="normal">
  <primary>documentation</primary>

</indexterm><indexterm significance="normal">
  <primary>HTML</primary>

</indexterm><indexterm significance="normal">
  <primary>Javadoc</primary>

</indexterm>Notice how much of <literal moreinfo="none">Point.java</literal> is documentation (see <xref linkend="javadoc"/>). Each method includes comments and tags like <literal moreinfo="none">@param</literal> and <literal moreinfo="none">@return</literal>. Javadoc reads these comments and generates documentation in HTML. You can see the same documentation online by doing a web search for “Java Point”. </para><para>Now take a look at the <literal moreinfo="none">grow</literal> and <literal moreinfo="none">translate</literal> methods in the <literal moreinfo="none">Rectangle</literal> class. There is more to them than you may have expected. </para>
</sect1><sect1 id="UML" remap="section">
  <title>Class Diagrams</title><para>To summarize what we’ve learned so far, <literal moreinfo="none">Point</literal> and <literal moreinfo="none">Rectangle</literal> objects have attributes and methods. Attributes are an object’s <emphasis>data</emphasis>; methods are an object’s <emphasis>code</emphasis>. An object’s <emphasis>class</emphasis> definition specifies the attributes and methods that it has. </para><para><indexterm significance="normal">
  <primary>UML</primary>

</indexterm><emphasis role="bold">Unified Modeling Language</emphasis> (UML) defines a graphical way to summarize this information. <xref linkend="fig.umlPoint"/>, shows two examples, the <emphasis role="bold">UML class diagrams</emphasis> for the <literal moreinfo="none">Point</literal> and <literal moreinfo="none">Rectangle</literal> classes. </para>
  
  <figure id="fig.umlPoint" float="False">
    <title>UML class diagrams for <literal moreinfo="none">Point</literal> and <literal moreinfo="none">Rectangle</literal>.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/point-rect.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para><indexterm significance="normal">
  <primary>class diagram</primary>

</indexterm><indexterm significance="normal">
  <primary>diagram</primary>
<secondary>class</secondary>
</indexterm>Each class is represented by a box with the name of the class, a list of attributes, and a list of methods. </para><para><indexterm significance="normal">
  <primary>private</primary>

</indexterm><indexterm significance="normal">
  <primary>variable</primary>
<secondary>private</secondary>
</indexterm>To identify the types of attributes and parameters, UML uses a language-independent syntax, like <literal moreinfo="none">x: int</literal> rather than Java syntax, <literal moreinfo="none">int x</literal>. </para><para>The plus sign (<literal moreinfo="none">+</literal>) identifies <literal moreinfo="none">public</literal> attributes and methods. A minus sign (<literal moreinfo="none">-</literal>) identifies <literal moreinfo="none">private</literal> attributes and methods, which we discuss in the next chapter. </para><para>Both <literal moreinfo="none">Point</literal> and <literal moreinfo="none">Rectangle</literal> have additional methods; we only show the ones introduced in this chapter. </para><para>In contrast to memory diagrams, which visualize objects (and variables) at run-time, a class diagram visualizes the source code at compile-time. </para>
</sect1><sect1 id="a0000007880" remap="section">
  <title>Scope Revisited</title>
    <para><indexterm significance="normal">
  <primary>scope</primary>

</indexterm>In <xref linkend="stack"/>, we introduced the idea that variables have scope. The scope of a variable is the part of a program where a variable can be used. </para><para>Consider the first few lines of the <literal moreinfo="none">Rectangle.translate</literal> method from the Java library source code: </para><programlisting language="java" format="linespecific">public void translate(int dx, int dy) {
    int oldv = this.x;
    int newv = oldv + dx;
    if (dx &lt; 0) {
    ...</programlisting><para>This example uses three kinds of variables: </para><orderedlist inheritnum="ignore" continuation="restarts">
  
  <listitem><para>Parameters (<literal moreinfo="none">dx</literal> and <literal moreinfo="none">dy</literal>) </para></listitem>
  
  <listitem><para><indexterm significance="normal">
  <primary>this</primary>

</indexterm>Local variables (<literal moreinfo="none">oldv</literal> and <literal moreinfo="none">newv</literal>) </para></listitem>
  
  <listitem><para>Attributes (<literal moreinfo="none">this.x</literal>) </para></listitem>
  
</orderedlist><para>Parameters and local variables are created when a method is invoked, and they disappear when the method returns. They can be used anywhere inside the method, but not in other methods and not in other classes. </para><para>Attributes are created when an object is created, and they disappear when the object is destroyed. They can be used in any of the object’s methods, using the keyword <literal moreinfo="none">this</literal>. And if they are public, they can be used in other classes via references to the object, <literal moreinfo="none">box1.x</literal>. </para><para>When the Java compiler encounters a variable name, it searches backwards for its declaration. The compiler first looks for local variables, then parameters, then attributes. </para>
</sect1><sect1 id="a0000007917" remap="section">
  <title>Garbage Collection</title>
    <para>In the previous section, we said that attributes exist as long as the object exists. But when does an object cease to exist? Here is a simple example: </para><programlisting language="java" format="linespecific">Point blank = new Point(3, 4);
blank = null;</programlisting><para>The first line creates a new <literal moreinfo="none">Point</literal> object and makes <literal moreinfo="none">blank</literal> refer to it. The second line changes <literal moreinfo="none">blank</literal> so that instead of referring to the object, it refers to nothing. As shown in <xref linkend="fig.reference3"/>, after the second assignment, there are no references to the <literal moreinfo="none">Point</literal> object. </para>
  
  <figure id="fig.reference3" float="False">
    <title>Memory diagram showing the effect of setting a variable to <literal moreinfo="none">null</literal>.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/reference3.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para>If there are no references to an object, there is no way to access its attributes or invoke a method on it. From the program’s point of view, it ceases to exist. However, it’s still present in the computer’s memory, taking up space. </para><para><indexterm significance="normal">
  <primary>garbage collection</primary>

</indexterm>As your program runs, the system automatically looks for stranded objects and deletes them; then the space can be reused for new objects. This process is called <emphasis role="bold">garbage collection</emphasis>. </para><para>You don’t have to do anything to make garbage collection happen, and in general, you don’t have to be aware of it. But in high-performance applications, you may notice a slight delay every now and then while Java reclaims space from discarded objects. </para>
</sect1><sect1 id="a0000007946" remap="section">
  <title>Mutable vs Immutable</title>
    <para><indexterm significance="normal">
  <primary>mutable</primary>

</indexterm><indexterm significance="normal">
  <primary>immutable</primary>

</indexterm><literal moreinfo="none">Point</literal>s and <literal moreinfo="none">Rectangle</literal>s are <emphasis role="bold">mutable</emphasis> objects, because their attributes can be modified. You can modify their attributes directly, like <literal moreinfo="none">box.x = 15</literal>, or you can invoke methods that modify their attributes, like <literal moreinfo="none">box.translate(15, 0)</literal>. </para><para>In contrast, immutable objects like <literal moreinfo="none">String</literal>s and <literal moreinfo="none">Integer</literal>s cannot be modified. They don’t allow direct access to their attributes or provide methods that change them. </para><para>Immutable objects have a number of advantages that help improve the reliability and performance of programs. You can pass strings (and other immutable objects) to methods without worrying about their contents changing as a “side-effect” of the method. That makes programs easier to debug, and more reliable. </para><para>Also, two strings that contain the same characters can be stored in memory only once. That can reduces the amount of memory the program uses, and can speed it up. </para><para><indexterm significance="normal">
  <primary>Surprise.java</primary>

</indexterm>In the following example, <literal moreinfo="none">s1</literal> and <literal moreinfo="none">s2</literal> are created differently, but they refer to equivalent strings; that is, the two strings contains the same characters. </para><programlisting language="java" format="linespecific">public class Surprise {
    public static void main(String[] args) {
        String s1 = "Hi, Mom!";
        String s2 = "Hi, " + "Mom!";
        if (s1 == s2) {                // true!
            System.out.println("s1 and s2 are the same");
        }
    }
}</programlisting><para>Because both strings are specified at compile time, the compiler can tell that they are equivalent. And because strings are immutable, there is no need to make two copies; the compiler can create one <literal moreinfo="none">String</literal> and make both variables refer to it. </para><para>As a result, the test <literal moreinfo="none">s1 == s2</literal> turns out to be true, which means that <literal moreinfo="none">s1</literal> and <literal moreinfo="none">s2</literal> refer to the same object. In other words, they are not just equivalent; they are identical. </para><para>Although immutable objects have some advantages, mutable objects have other advantages. Sometimes it is more efficient to modify an existing object, rather than creating a new one. And some computations can be expressed more naturally using mutation. </para><para>Neither design is always better, which is why you will see both. </para>
</sect1><sect1 id="stringbuilder" remap="section">
  <title>StringBuilder Objects</title><para>Here’s an example where mutable objects are efficient and arguably more natural: building a long string by concatenating lots of small pieces. </para><para><indexterm significance="normal">
  <primary>Append.java</primary>

</indexterm>Strings are particularly inefficient for this operation. For example, consider the following program, which reads ten lines from <literal moreinfo="none">System.in</literal> and concatenates them into a single <literal moreinfo="none">String</literal>. </para><programlisting language="java" format="linespecific">String text = "";
for (int i = 0; i &lt; 10; i++) {
    String line = in.nextLine();        // new string
    text = text + line + '\n';    // two more strings
}</programlisting><para>Inside the <literal moreinfo="none">for</literal> loop, <literal moreinfo="none">in.nextLine()</literal> returns a new string each time it is invoked. The next line of code concatenates <literal moreinfo="none">text</literal> and <literal moreinfo="none">line</literal>, which creates another string, and then appends the newline character, which creates yet another string. </para><para>As a result, this loop creates 30 <literal moreinfo="none">String</literal> objects! At the end, <literal moreinfo="none">text</literal> refers to the most recent <literal moreinfo="none">String</literal>. Garbage collection deletes the rest, but that’s a lot of garbage for a seemly simple program. </para><para><indexterm significance="normal">
  <primary>StringBuilder</primary>

</indexterm>The Java library provides the <literal moreinfo="none">StringBuilder</literal> class for just this reason. It’s part of the <literal moreinfo="none">java.lang</literal> package, so you don’t need to import it. Because <literal moreinfo="none">StringBuilder</literal> objects are mutable, they can implement concatenation more efficiently. </para><para>Here’s a version of the program that uses <literal moreinfo="none">StringBuilder</literal>: </para><programlisting language="java" format="linespecific">StringBuilder text = new StringBuilder();
for (int i = 0; i &lt; 10; i++) {
    String line = in.nextLine();
    text.append(line);
    text.append('\n');
}</programlisting><para>The <literal moreinfo="none">append</literal> method takes a <literal moreinfo="none">String</literal> as a parameter and appends it to the end of the <literal moreinfo="none">StringBuilder</literal>. Each time it is invoked, it modifies the <literal moreinfo="none">StringBuilder</literal>; it doesn’t create any new objects. </para><para>The <literal moreinfo="none">StringBuilder</literal> class also provides methods for inserting and deleting parts of strings efficiently. Programs that manipulate large amounts of text run much faster if you use <literal moreinfo="none">StringBuilder</literal> instead of <literal moreinfo="none">String</literal>. </para>
</sect1><sect1 id="a0000008042" remap="section">
  <title>Vocabulary</title>
    <variablelist>
  <varlistentry>
    <term>attribute:</term>
      <listitem><para><indexterm significance="normal">
  <primary>attribute</primary>

</indexterm>One of the named data items that make up an object. </para></listitem>
  </varlistentry><varlistentry>
    <term>dot notation:</term>
      <listitem><para><indexterm significance="normal">
  <primary>dot notation</primary>

</indexterm>Use of the dot operator (<literal moreinfo="none">.</literal>) to access an object’s attributes or methods. </para></listitem>
  </varlistentry><varlistentry>
    <term>UML:</term>
      <listitem><para><indexterm significance="normal">
  <primary>UML</primary>

</indexterm>Unified Modeling Language, a standard way to draw diagrams for software engineering. </para></listitem>
  </varlistentry><varlistentry>
    <term>class diagram:</term>
      <listitem><para><indexterm significance="normal">
  <primary>class diagram</primary>

</indexterm>An illustration of the attributes and methods for a class. </para></listitem>
  </varlistentry><varlistentry>
    <term>garbage collection:</term>
      <listitem><para><indexterm significance="normal">
  <primary>garbage collection</primary>

</indexterm>The process of finding objects that have no references and reclaiming their storage space. </para></listitem>
  </varlistentry><varlistentry>
    <term>mutable:</term>
      <listitem><para><indexterm significance="normal">
  <primary>mutable</primary>

</indexterm>An object that can be modified at any time. Points and rectangles are mutable by design. </para></listitem>
  </varlistentry>
</variablelist>
</sect1><sect1 id="a0000008059" remap="section">
  <title>Exercises</title>
    <para>The code for this chapter is in the <literal moreinfo="none">ch10</literal> directory of <literal moreinfo="none">ThinkJavaCode2</literal>. See <xref linkend="code"/> for instructions on how to download the repository. Before you start the exercises, we recommend that you compile and run the examples. </para><para>At this point you know enough to read <xref linkend="graphics"/>, which is about simple 2D graphics and animations. During the next few chapters, you should take a detour to read this appendix and work through the exercises. </para><para><example id="a0000008071" role="exercise">
  <title/>
  <para>The point of this exercise is to make sure you understand the mechanism for passing objects as parameters. </para><orderedlist inheritnum="ignore" continuation="restarts">
  
  <listitem><para>For the following program, draw a stack diagram showing the local variables and parameters of <literal moreinfo="none">main</literal> and <literal moreinfo="none">riddle</literal> just before <literal moreinfo="none">riddle</literal> returns. Use arrows to show which objects each variable references. </para></listitem>
  
  <listitem><para>What is the output of the program? </para></listitem>
  
  <listitem><para>Is the <literal moreinfo="none">blank</literal> object mutable or immutable? How can you tell? </para></listitem>
  
</orderedlist><programlisting language="java" format="linespecific">public static int riddle(int x, Point p) {
    x = x + 7;
    return x + p.x + p.y;
}</programlisting><programlisting language="java" format="linespecific">public static void main(String[] args) {
    int x = 5;
    Point blank = new Point(1, 2);

    System.out.println(riddle(x, blank));
    System.out.println(x);
    System.out.println(blank.x);
    System.out.println(blank.y);
}</programlisting></example> </para><para><example id="a0000008094" role="exercise">
  <title/>
  <para>The point of this exercise is to make sure you understand the mechanism for returning new objects from methods. The following code uses <literal moreinfo="none">findCenter</literal> and <literal moreinfo="none">distance</literal> as defined in this chapter. </para><orderedlist inheritnum="ignore" continuation="restarts">
  
  <listitem><para>Draw a stack diagram showing the state of the program just before <literal moreinfo="none">findCenter</literal> returns. Include all variables and parameters, and show the objects those variables refer to. </para></listitem>
  
  <listitem><para>Draw a stack diagram showing the state of the program just before <literal moreinfo="none">distance</literal> returns. Show all variables, parameters, and objects. </para></listitem>
  
  <listitem><para>What is the output of this program? (Can you tell without running it?) </para></listitem>
  
</orderedlist><programlisting language="java" format="linespecific">public static void main(String[] args) {
    Point blank = new Point(5, 8);

    Rectangle rect = new Rectangle(0, 2, 4, 4);
    Point center = findCenter(rect);

    double dist = distance(center, blank);
    System.out.println(dist);
}</programlisting></example> </para><para><example id="a0000008115" role="exercise">
  <title/>
  <para>This exercise is about aliasing. Recall that aliases are two variables that refer to the same object. The following code uses <literal moreinfo="none">findCenter</literal> and <literal moreinfo="none">printPoint</literal> as defined in this chapter. </para><orderedlist inheritnum="ignore" continuation="restarts">
  
  <listitem><para>Draw a diagram that shows the state of the program just before the end of <literal moreinfo="none">main</literal>. Include all local variables and the objects they refer to. </para></listitem>
  
  <listitem><para>What is the output of the program? </para></listitem>
  
  <listitem><para>At the end of <literal moreinfo="none">main</literal>, are <literal moreinfo="none">p1</literal> and <literal moreinfo="none">p2</literal> aliased? Why or why not? </para></listitem>
  
</orderedlist><programlisting language="java" format="linespecific">public static void main(String[] args) {
    Rectangle box1 = new Rectangle(2, 4, 7, 9);
    Point p1 = findCenter(box1);
    printPoint(p1);

    box1.grow(1, 1);
    Point p2 = findCenter(box1);
    printPoint(p2);
}</programlisting></example> </para>
</sect1>
</chapter>

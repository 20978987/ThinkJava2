<appendix id="graphics">
  <title>Graphics</title><para><indexterm significance="normal">
  <primary>AWT</primary>

</indexterm><indexterm significance="normal">
  <primary>java.awt</primary>

</indexterm>The Java library includes the package <literal moreinfo="none">java.awt</literal> for drawing 2D graphics. <emphasis role="bold">AWT</emphasis> stands for “Abstract Window Toolkit”. We are only going to scratch the surface of graphics programming. You can read more about it in the Java tutorials at <ulink url="https://thinkjava.org/java2d"/>. </para><sect1 id="a0000013640" remap="section">
  <title>Creating Graphics</title>
    <para><indexterm significance="normal">
  <primary>Canvas</primary>

</indexterm><indexterm significance="normal">
  <primary>class</primary>
<secondary>Canvas</secondary>
</indexterm><indexterm significance="normal">
  <primary>Graphics</primary>

</indexterm><indexterm significance="normal">
  <primary>class</primary>
<secondary>Graphics</secondary>
</indexterm>There are several ways to create graphics in Java; the simplest way is to use <literal moreinfo="none">java.awt.Canvas</literal> and <literal moreinfo="none">java.awt.Graphics</literal>. A <literal moreinfo="none">Canvas</literal> is a blank rectangular area of the screen onto which the application can draw. The <literal moreinfo="none">Graphics</literal> class provides basic drawing methods such as <literal moreinfo="none">drawLine</literal>, <literal moreinfo="none">drawRect</literal>, and <literal moreinfo="none">drawString</literal>. </para><para>Here is an example program that draws a circle using the <literal moreinfo="none">fillOval</literal> method: </para><programlisting language="java" format="linespecific">import java.awt.Canvas;
import java.awt.Graphics;
import javax.swing.JFrame;

public class Drawing extends Canvas {</programlisting><programlisting language="java" format="linespecific">    public static void main(String[] args) {
        JFrame frame = new JFrame("My Drawing");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Drawing drawing = new Drawing();
        drawing.setSize(400, 400);
        frame.add(drawing);
        frame.pack();
        frame.setVisible(true);
    }

    public void paint(Graphics g) {
        g.fillOval(100, 100, 200, 200);
    }
}</programlisting><para>The <literal moreinfo="none">Drawing</literal> class extends <literal moreinfo="none">Canvas</literal>, so it has all the methods provided by <literal moreinfo="none">Canvas</literal>, including <literal moreinfo="none">setSize</literal>. You can read about the other methods in the documentation, which you can find by doing a web search for “Java Canvas”. </para><para><indexterm significance="normal">
  <primary>JFrame</primary>

</indexterm><indexterm significance="normal">
  <primary>class</primary>
<secondary>JFrame</secondary>
</indexterm>In the <literal moreinfo="none">main</literal> method, we: </para><orderedlist inheritnum="ignore" continuation="restarts">
  
  <listitem><para>Create a <literal moreinfo="none">JFrame</literal> object, which is the window that will contain the canvas. </para></listitem>
  
  <listitem><para>Create a <literal moreinfo="none">Drawing</literal> object (which is the canvas), set its width and height, and add it to the frame. </para></listitem>
  
  <listitem><para>Pack the frame (resize it) to fit the canvas, and display it on the screen. </para></listitem>
  
</orderedlist><para><indexterm significance="normal">
  <primary>paint</primary>

</indexterm>Once the frame is visible, the <literal moreinfo="none">paint</literal> method is called whenever the canvas needs to be drawn; for example, when the window is moved or resized. If you run this code, you should see a black circle on a gray background. </para><para>The application doesn’t end after the <literal moreinfo="none">main</literal> method returns; instead, it waits for the <literal moreinfo="none">JFrame</literal> to close. When the <literal moreinfo="none">JFrame</literal> closes, it calls <literal moreinfo="none">System.exit</literal>, which ends the program. </para>
</sect1><sect1 id="a0000013702" remap="section">
  <title>Graphics Methods</title>
    <para><indexterm significance="normal">
  <primary>coordinate</primary>

</indexterm>You are probably used to Cartesian <emphasis role="bold">coordinates</emphasis>, where <emphasis role="math">x</emphasis> and <emphasis role="math">y</emphasis> values can be positive or negative. In contrast, Java uses a coordinate system where the origin is in the upper-left corner. That way, <emphasis role="math">x</emphasis> and <emphasis role="math">y</emphasis> can always be positive integers. <xref linkend="fig.coordinates"/> shows these coordinate systems side-by-side. </para>
  
  <figure id="fig.coordinates" float="False">
    <title>Diagram of the difference between Cartesian coordinates and Java graphical coordinates.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/coordinates.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para><indexterm significance="normal">
  <primary>pixel</primary>

</indexterm>Graphical coordinates are measured in <emphasis role="bold">pixels</emphasis>; each pixel corresponds to a dot on the screen. </para><para>To draw on the canvas, you invoke methods on a <literal moreinfo="none">Graphics</literal> object. You don’t have to create the <literal moreinfo="none">Graphics</literal> object; it gets created when you create the <literal moreinfo="none">Canvas</literal>, and it gets passed as an argument to <literal moreinfo="none">paint</literal>. </para><para>The previous example used <literal moreinfo="none">fillOval</literal>, which has the following signature: </para><programlisting language="java" format="linespecific">/**
 * Fills an oval bounded by the specified rectangle with
 * the current color.
 */
public void fillOval(int x, int y, int width, int height)</programlisting><para><indexterm significance="normal">
  <primary>bounding box</primary>

</indexterm>The four parameters specify a <emphasis role="bold">bounding box</emphasis>, which is the rectangle in which the oval is drawn. <literal moreinfo="none">x</literal> and <literal moreinfo="none">y</literal> specify the location of the upper-left corner of the bounding box. The bounding box itself is not drawn (see <xref linkend="fig.circle"/>). </para>
  
  <figure id="fig.circle" float="False">
    <title>Diagram of an oval inside its bounding box.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/circle.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para><indexterm significance="normal">
  <primary>Color</primary>

</indexterm>To choose the color of a shape, invoke <literal moreinfo="none">setColor</literal> on the <literal moreinfo="none">Graphics</literal> object: </para><programlisting language="java" format="linespecific">g.setColor(Color.RED);</programlisting><para>The <literal moreinfo="none">setColor</literal> method determines the color of everything that gets drawn afterward. <literal moreinfo="none">Color.red</literal> is a constant provided by the <literal moreinfo="none">Color</literal> class; to use it you have to <literal moreinfo="none">import java.awt.Color</literal>. Other colors include: </para><programlisting format="linespecific">BLACK       BLUE      CYAN     DARKGRAY   GRAY    LIGHTGRAY
GREEN       MAGENTA   ORANGE   PINK       WHITE   YELLOW</programlisting><para><indexterm significance="normal">
  <primary>RGB</primary>

</indexterm>You can create your own colors by specifying the red, green, and blue (<emphasis role="bold">RGB</emphasis>) components. For example: </para><programlisting language="java" format="linespecific">Color purple = new Color(128, 0, 128);</programlisting><para>Each value is an integer in the range 0 (darkest) to 255 (lightest). The color <literal moreinfo="none">(0, 0, 0)</literal> is black, and <literal moreinfo="none">(255, 255, 255)</literal> is white. </para><para>You can set the background color of the <literal moreinfo="none">Canvas</literal> by invoking <literal moreinfo="none">setBackground</literal>: </para><programlisting language="java" format="linespecific">canvas.setBackground(Color.WHITE);</programlisting></sect1><sect1 id="a0000013790" remap="section">
  <title>Example Drawing</title>
    <para><indexterm significance="normal">
  <primary>Mickey Mouse</primary>

</indexterm>Suppose we want to draw a “Hidden Mickey”, which is an icon that represents Mickey Mouse (see <ulink url="https://en.wikipedia.org/wiki/Hidden_Mickey"/>). We can use the oval we just drew as the face, and then add two ears. To make the code more readable, let’s use <literal moreinfo="none">Rectangle</literal> objects to represent bounding boxes. </para><para>Here’s a method that takes a <literal moreinfo="none">Rectangle</literal> and invokes <literal moreinfo="none">fillOval</literal>: </para><programlisting language="java" format="linespecific">public void boxOval(Graphics g, Rectangle bb) {
    g.fillOval(bb.x, bb.y, bb.width, bb.height);
}</programlisting><para>And here’s a method that draws Mickey Mouse: </para><programlisting language="java" format="linespecific">public void mickey(Graphics g, Rectangle bb) {
    boxOval(g, bb);

    int hx = bb.width / 2;
    int hy = bb.height / 2;
    Rectangle half = new Rectangle(bb.x, bb.y, hx, hy);

    half.translate(-hx / 2, -hy / 2);
    boxOval(g, half);

    half.translate(hx * 2, 0);
    boxOval(g, half);
}</programlisting><para>The first line draws the face. The next three lines create a smaller rectangle for the ears. We <literal moreinfo="none">translate</literal> the rectangle up and left for the first ear, then to the right for the second ear. The result is shown in <xref linkend="fig.mickey"/>. </para>
  
  <figure id="fig.mickey" float="False">
    <title>A “Hidden Mickey” drawn using Java graphics.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/mickey.png"></imagedata>
  </imageobject>
</mediaobject></figure>
<para>You can read more about <literal moreinfo="none">Rectangle</literal> and <literal moreinfo="none">translate</literal> in <xref linkend="mutable"/>. See the exercises at the end of this appendix for more example drawings. </para>
</sect1><sect1 id="a0000013824" remap="section">
  <title>Vocabulary</title>
    <variablelist>
  <varlistentry>
    <term>AWT:</term>
      <listitem><para><indexterm significance="normal">
  <primary>AWT</primary>

</indexterm>The “Abstract Window Toolkit”, a Java package for creating graphical user interfaces. </para></listitem>
  </varlistentry><varlistentry>
    <term>coordinate:</term>
      <listitem><para><indexterm significance="normal">
  <primary>coordinate</primary>

</indexterm>A value that specifies a location in a 2D graphical window. </para></listitem>
  </varlistentry><varlistentry>
    <term>pixel:</term>
      <listitem><para><indexterm significance="normal">
  <primary>pixel</primary>

</indexterm>The unit in which coordinates are measured. </para></listitem>
  </varlistentry><varlistentry>
    <term>bounding box:</term>
      <listitem><para><indexterm significance="normal">
  <primary>bounding box</primary>

</indexterm>A way to specify the coordinates of a rectangular area. </para></listitem>
  </varlistentry><varlistentry>
    <term>RGB:</term>
      <listitem><para><indexterm significance="normal">
  <primary>RGB</primary>

</indexterm>A color model based on adding red, green, and blue light. </para></listitem>
  </varlistentry>
</variablelist>
</sect1><sect1 id="a0000013837" remap="section">
  <title>Exercises</title>
    <para>The code for this chapter is in the <literal moreinfo="none">appc</literal> directory of <literal moreinfo="none">ThinkJavaCode2</literal>. See <xref linkend="code"/> for instructions on how to download the repository. Before you start the exercises, we recommend that you compile and run the examples. </para><para><example id="a0000013846" role="exercise">
  <title/>
  <para>Draw the flag of Japan: a red circle on a white background that is wider than it is tall. </para>
</example> </para><para><example id="a0000013849" role="exercise">
  <title/>
  <para>Modify <literal moreinfo="none">Mickey.java</literal> to draw ears on the ears, and ears on those ears, and more ears all the way down until the smallest ears are only 3 pixels wide. The result should look like “Mickey Moose”, shown in <xref linkend="fig.moose"/>. <emphasis>Hint:</emphasis> You should only have to add or modify a few lines of code. </para>
  
  <figure id="fig.moose" float="False">
    <title>A recursive shape we call “Mickey Moose”.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/moose.png"></imagedata>
  </imageobject>
</mediaobject></figure>

</example> </para><para><example id="a0000013864" role="exercise">
  <title/>
  <para>In this exercise, you will draw “Moiré patterns” that seem to shift around as you move. For an explanation of what is going on, see <ulink url="https://en.wikipedia.org/wiki/Moire_pattern"/>. </para><orderedlist inheritnum="ignore" continuation="restarts">
  
  <listitem><para>Open <literal moreinfo="none">Moire.java</literal> and read the <literal moreinfo="none">paint</literal> method. Draw a sketch of what you expect it to do. Now run it. Did you get what you expected? </para></listitem>
  
  <listitem><para>Modify the program so that the space between the circles is larger or smaller. See what happens to the image. </para></listitem>
  
  <listitem><para>Modify the program so that the circles are drawn in the center of the screen and concentric, as in <xref linkend="fig.moire"/> (left). The distance between the circles should be small enough that the Moiré interference is apparent. </para>
  
  <figure id="fig.moire" float="False">
    <title>Graphical patterns that can exhibit Moiré interference.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/moire.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
</listitem>
  
  <listitem><para>Write a method named <literal moreinfo="none">radial</literal> that draws a radial set of line segments as shown in <xref linkend="fig.moire"/> (right), but they should be close enough together to create a Moiré pattern. </para></listitem>
  
  <listitem><para>Just about any kind of graphical pattern can generate Moiré-like interference patterns. Play around and see what you can create. </para></listitem>
  
</orderedlist>
</example> </para>
</sect1>
</appendix>

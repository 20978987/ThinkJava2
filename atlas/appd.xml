<appendix id="tools">
  <title>Tools</title><para><indexterm significance="normal">
  <primary></primary>

</indexterm>The steps for compiling, running, and debugging Java code depend on your development environment and operating system. We avoided putting these details in the main text, because they can be distracting. Instead, we provide this appendix with a brief introduction to DrJava—an <emphasis role="bold">integrated development environment</emphasis> (IDE) that is helpful for beginners—and other development tools, including Checkstyle for code quality and JUnit for testing. </para>
<sect1 id="drjava" remap="section">
  <title>Installing DrJava</title><para>The easiest way to start programming in Java is to use a website that compiles and runs Java code in the browser. Examples include <ulink url="https://repl.it/"/>, <ulink url="https://trinket.io/"/>, <ulink url="https://jdoodle.com/"/>, and others. </para>

  
  <para>If you are unable to install software on your computer (which is often the case in public schools and Internet cafés), you can use these online development environments for almost everything in this book. </para>

  
  <para>But if you want to compile and run Java programs on your own computer, you will need: </para>
<itemizedlist>
  
    <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm><indexterm significance="normal">
  <primary></primary>

</indexterm><indexterm significance="normal">
  <primary></primary>

</indexterm><indexterm significance="normal">
  <primary></primary>

</indexterm>The <emphasis role="bold">Java Development Kit</emphasis> (JDK), which includes the compiler, the <emphasis role="bold">Java Virtual Machine</emphasis> (JVM) that interprets the compiled byte code, and other tools such as Javadoc. </para>

  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm><indexterm significance="normal">
  <primary></primary>

</indexterm></para>
</listitem>
  
    <listitem>
  
  <para>A <emphasis role="bold">text editor</emphasis> such as Atom, Notepad++, or Sublime Text, and/or an IDE such as DrJava, Eclipse, jGrasp, or NetBeans. </para>
</listitem>
  
</itemizedlist>
  
  <para>The JDK we recommend is OpenJDK, an open-source implementation of Java SE (Standard Edition). The IDE we recommend is DrJava, which is an open-source development environment written in Java (see <xref linkend="fig.drjava1"/>). </para>

  
  <para>To install OpenJDK, visit <ulink url="https://adoptopenjdk.net"/>. Download and run the installer for your operating system. </para>

  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>To install DrJava, visit <ulink url="http://drjava.org/"/> and download the <emphasis role="bold">JAR</emphasis> file. We recommend that you save it to your Desktop or another convenient location. Simply double-click the JAR file to run DrJava. Refer to the DrJava documentation (<ulink url="http://drjava.org/docs/quickstart/"/>) for more details. </para>

  
  <figure id="fig.drjava1" float="False">
    <title>Screenshot of DrJava editing the hello world program.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/drjava-hello.png"></imagedata>
  </imageobject>
</mediaobject></figure>

  
  <para>When running DrJava for the first time, we recommend you change three settings from the Edit <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mo>&gt;</mml:mo></mml:math></inlineequation> Preferences menu under Miscellaneous: set the Indent Level to 4, check the Automatically Close Block Comments box, and uncheck the Keep Emacs-style Backup Files box. </para>

</sect1><sect1 id="interactions" remap="section">
  <title>DrJava Interactions</title><para><indexterm significance="normal">
  <primary></primary>

</indexterm>One of the most useful features of DrJava is the “Interactions Pane” at the bottom of the window. It provides the ability to try out code quickly, without having to write a class definition and save/compile/run the program. <xref linkend="fig.drjava2"/> shows an example. </para>

  
  <figure id="fig.drjava2" float="False">
    <title>Screenshot of the Interactions Pane in DrJava.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/drjava-logic.png"></imagedata>
  </imageobject>
</mediaobject></figure>

  
  <para>There is one subtle detail to note when using the Interactions feature. If you don’t end an expression (or statement) with a semicolon, DrJava automatically displays its value. Notice in <xref linkend="fig.drjava2"/> how the variable declarations end with semicolons, but the logic expressions in the following lines do not. This feature saves you from having to type <literal moreinfo="none">System.out.println</literal> every time. </para>

  
  <para>What’s nice about this feature is that you don’t have to create a new class, declare a <literal moreinfo="none">main</literal> method, write arbitrary expressions inside <literal moreinfo="none">System.out.println</literal> statements, save the source file, and get all of your code to compile in advance. Also, you can press the up/down arrows on the keyboard to repeat previous commands and experiment with incremental differences. </para>

</sect1><sect1 id="commandline" remap="section">
  <title>Command-Line Interface</title><para><indexterm significance="normal">
  <primary></primary>

</indexterm><indexterm significance="normal">
  <primary></primary>

</indexterm>One of the most powerful and useful skills you can learn is how to use the <emphasis role="bold">command-line interface</emphasis>, also called the “terminal”. The command line is a direct interface to the operating system. It allows you to run programs, manage files and directories, and monitor system resources. Many advanced tools, both for software development and general-purpose computing, are available only at the command line. </para>

  
  <para>There are many good tutorials online for learning the command line for your operating system; just search the web for “command line tutorial”. On Unix systems like Linux and OS X, you can get started with just four commands: change the working directory (<literal moreinfo="none">cd</literal>), list directory contents (<literal moreinfo="none">ls</literal>), compile Java programs (<literal moreinfo="none">javac</literal>), and run Java programs (<literal moreinfo="none">java</literal>). </para>

  
  <para><xref linkend="fig.terminal"/> shows an example where the <literal moreinfo="none">Hello.java</literal> source file is stored in the <literal moreinfo="none">Desktop</literal> directory. After changing to that location and listing the files, we use the <literal moreinfo="none">javac</literal> command to compile <literal moreinfo="none">Hello.java</literal>. Running <literal moreinfo="none">ls</literal> again, we see that the compiler generated a new file, <literal moreinfo="none">Hello.class</literal>, which contains the byte code. We run the program using the <literal moreinfo="none">java</literal> command, which displays the output on the following line. </para>

  
  <figure id="fig.terminal" float="False">
    <title>Compiling and running <literal moreinfo="none">Hello.java</literal> from the command line.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/terminal.png"></imagedata>
  </imageobject>
</mediaobject></figure>

  
  <para>Note that the <literal moreinfo="none">javac</literal> command requires a <emphasis>filename</emphasis> (or multiple source files separated by spaces), whereas the <literal moreinfo="none">java</literal> command requires a single <emphasis>class name</emphasis>. If you use DrJava, it runs these commands for you behind the scenes and displays the output in the Interactions Pane. </para>

  
  <para>Taking time to learn this efficient and elegant way of interacting with the operating system will make you more productive. People who don’t use the command line don’t know what they’re missing. </para>

</sect1><sect1 id="cltesting" remap="section">
  <title>Command-Line Testing</title><para><indexterm significance="normal">
  <primary></primary>

</indexterm>As described in <xref linkend="sec..examples"/>, it’s more effective to program and debug your code little by little than to attempt writing everything all at once. And after you’ve completed programming an algorithm, it’s important to test that it works correctly on a variety of inputs. </para>

  
  <para>Throughout the book, we illustrate techniques for testing your programs. Most, if not all, testing is based on a simple idea: does the program do what we expect it to do? For simple programs, it’s not difficult to run them several times and see what happens. But at some point, you will get tired of typing the same test cases over and over. </para>

  
  <para>We can automate the process of entering input and comparing “expected output” with “actual output” using the command line. The basic idea is to store the test cases in plain text files and trick Java into thinking they are coming from the keyboard. Here are step-by-step instructions: </para>
<orderedlist inheritnum="ignore" continuation="restarts">
  
  <listitem>
  
  <para>Make sure you can compile and run the <literal moreinfo="none">Convert.java</literal> example in the <literal moreinfo="none">ch03</literal> directory of <literal moreinfo="none">ThinkJavaCode2</literal>. (See <xref linkend="code"/> for instructions on how to download the repository.) </para>
</listitem>
  
  <listitem>
  
  <para>In the same directory as <literal moreinfo="none">Convert.java</literal>, create a plain text file named <literal moreinfo="none">test.in</literal> (“in” is for input). Enter the following line and save the file: </para><programlisting format="linespecific">193.04</programlisting></listitem>
  
  <listitem>
  
  <para>Create a second plain text file named <literal moreinfo="none">test.exp</literal> (“exp” is for expected). Enter the following line and save the file: </para><programlisting format="linespecific">193.04 cm = 6 ft, 4 in</programlisting></listitem>
  
  <listitem>
  
  <para>Open a terminal, and change to the directory with these files. Run the following command to test the program: </para><programlisting format="linespecific">java Convert &lt; test.in &gt; test.out</programlisting></listitem>
  
</orderedlist>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm><indexterm significance="normal">
  <primary></primary>

</indexterm><indexterm significance="normal">
  <primary></primary>

</indexterm><indexterm significance="normal">
  <primary></primary>

</indexterm>On the command line, <literal moreinfo="none">&lt;</literal> and <literal moreinfo="none">&gt;</literal> are <emphasis role="bold">redirection operators</emphasis>. The first one redirects the contents of <literal moreinfo="none">test.in</literal> to <literal moreinfo="none">System.in</literal>, as if it were entered from the keyboard. The second one redirects the contents of <literal moreinfo="none">System.out</literal> to a new file <literal moreinfo="none">test.out</literal>, much like a screen capture. In other words, the <literal moreinfo="none">test.out</literal> file contains the output of your program. </para>

  
  <para>By the way, it’s perfectly okay to compile your programs in DrJava (or some other environment) and run them from the command line. Knowing both techniques allows you to use the right tool for the job. </para>

  
  <figure id="fig.meld" float="False">
    <title>Using <literal moreinfo="none">meld</literal> to compare expected output with the actual output.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/meld.png"></imagedata>
  </imageobject>
</mediaobject></figure>

  
  <para>At this point, we just need to compare the contents <literal moreinfo="none">test.out</literal> with <literal moreinfo="none">test.exp</literal>. If the files are the same, then the program outputted what we expected it to output. If not, then we found a bug, and we can use the output to begin debugging our program. Fortunately, there’s a simple way to compare files on the command line: </para><programlisting format="linespecific">diff test.exp test.out</programlisting><para>The <literal moreinfo="none">diff</literal> utility summarizes the differences between two files. If there are no differences, then it displays nothing, which in our case is what we want. If the expected output differs from the actual output, then we need to continue debugging. Usually the program is at fault, and <literal moreinfo="none">diff</literal> provides some insight about what is broken. But there’s also a chance that we have a correct program and the expected output is wrong. </para>

  
  <para>Interpreting the results from <literal moreinfo="none">diff</literal> can be confusing, but fortunately there are many graphical tools that show the differences between two files. For example, on Windows you can install <literal moreinfo="none">WinMerge</literal>, on Mac you can use <literal moreinfo="none">opendiff</literal> (which comes with Xcode), and on Linux there’s <literal moreinfo="none">meld</literal>, shown in <xref linkend="fig.meld"/>. </para>

  
  <para>Regardless of what tool you use, the goal is the same. Debug your program until the actual output is <emphasis>identical</emphasis> to the expected output. </para>

</sect1><sect1 id="checkstyle" remap="section">
  <title>Running Checkstyle</title><para><indexterm significance="normal">
  <primary></primary>

</indexterm>Checkstyle is a command-line tool that can be used to determine if your source code follows a set of style rules. It also checks for common programming mistakes, such as class and method design problems. </para>

  
  <para>You can download the latest version as a JAR file from <ulink url="https://checkstyle.sourceforge.io/"/>. To run Checkstyle, move (or copy) the JAR file to the same directory as your program. Open a terminal in that location, and run the following command: </para><programlisting format="linespecific">java -jar checkstyle-*-all.jar -c /google_checks.xml *.java</programlisting><para><indexterm significance="normal">
  <primary></primary>

</indexterm>The <literal moreinfo="none">*</literal> characters are <emphasis role="bold">wildcards</emphasis> that match whatever version of Checkstyle you have and whatever Java source files are present. The output indicates the file and line number of each problem. This example refers to a method beginning on line 93, column 5 of <literal moreinfo="none">Hello.java</literal>: </para><programlisting format="linespecific">Hello.java:93:5: Missing a Javadoc comment</programlisting><para>The file <literal moreinfo="none">/google_checks.xml</literal> is inside the JAR file and represents most of Google’s style rules. You can alternatively use <literal moreinfo="none">/sun_checks.xml</literal> or provide your own configuration file. See Checkstyle’s website for more information. </para>

  
  <para>If you apply Checkstyle to your source code often, you will likely internalize good style habits over time. But there are limits to what automatic style checkers can do. In particular, they can’t evaluate the <emphasis>quality</emphasis> of your comments, the <emphasis>meaning</emphasis> of your variable names, or the <emphasis>structure</emphasis> of your algorithms. </para>

  
  <para>Good comments make it easier for experienced developers to identify errors in your code. Good variable names communicate the intent of your program and how the data is organized. And good programs are designed to be efficient and demonstrably correct. </para>

</sect1><sect1 id="debugger" remap="section">
  <title>Tracing with a Debugger</title><para><indexterm significance="normal">
  <primary></primary>

</indexterm><indexterm significance="normal">
  <primary></primary>

</indexterm>A great way to visualize the flow of execution, including how parameters and arguments work, is to use a <emphasis role="bold">debugger</emphasis>. Most debuggers make it possible to: </para>
<orderedlist inheritnum="ignore" continuation="restarts">
  
  <listitem>
  
  <para>Set a <emphasis role="bold">breakpoint</emphasis>, a line where you want the program to pause. </para>
</listitem>
  
  <listitem>
  
  <para>Step through the code one line at a time and watch what it does. </para>
</listitem>
  
  <listitem>
  
  <para>Check the values of variables and see when and how they change. </para>
</listitem>
  
</orderedlist>
  
  <para>For example, open any program in DrJava and move the cursor to the first line of <literal moreinfo="none">main</literal>. Press Ctrl+B to toggle a breakpoint on the current line; it should now be highlighted in red. Press Ctrl+Shift+D to turn on Debug Mode; a new pane should appear at the bottom of the window. These commands are also available from the Debugger menu, in case you forget the shortcut keys. </para>

  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>When you run the program, execution pauses at the first breakpoint. The debug pane displays the <emphasis role="bold">call stack</emphasis>, with the current method on top of the stack, as shown in <xref linkend="fig.debugger"/>. You might be surprised to see how many methods were called before the <literal moreinfo="none">main</literal> method! </para>

  
  <figure id="fig.debugger" float="False">
    <title>Screenshot of the DrJava debugger. Execution is currently paused on the first line of <literal moreinfo="none">printTwice</literal>. There is a breakpoint on the first line of <literal moreinfo="none">main</literal>.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/debugger.png"></imagedata>
  </imageobject>
</mediaobject></figure>

  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>To the right are several buttons that allow you to step through the code at your own pace. You can also press Automatic Trace to watch DrJava run your code one line at a time. </para>

  
  <para>Using a debugger is like having the computer proofread your code out loud. When the program is paused, you can examine (or even change) the value of any variable using the Interactions Pane. </para>

  
  <para>Tracing allows you to follow the flow of execution and see how data pass from one method to another. You might expect the code do one thing, but then the debugger shows it doing something else. At that moment, you gain insight about what may be wrong with the code. </para>

  
  <para>You can edit your code while debugging it, but we don’t recommend it. If you add or delete multiple lines of code while the program is paused, the results can be confusing. </para>

  
  <para>See <ulink url="http://drjava.org/docs/user/ch09.html"/> for more information about using the debugger feature of DrJava. </para>

</sect1><sect1 id="JUnit" remap="section">
  <title>Testing with JUnit</title><para><indexterm significance="normal">
  <primary></primary>

</indexterm>When beginners start writing methods, they usually test them by invoking them from <literal moreinfo="none">main</literal> and checking the results by hand. For example, to test <literal moreinfo="none">fibonacci</literal> from <xref linkend="fibonacci"/>, we could write: </para>
<programlisting language="java" format="linespecific">public static void main(String[] args) {
    if (fibonacci(1) != 1) {
        System.err.println("fibonacci(1) is incorrect");
    }
    if (fibonacci(2) != 1) {
        System.err.println("fibonacci(2) is incorrect");
    }
    if (fibonacci(3) != 2) {
        System.err.println("fibonacci(3) is incorrect");
    }
}</programlisting><para>This test code is self-explanatory, but it’s longer than it needs to be, and it doesn’t scale very well. In addition, the error messages provide limited information. For cases where we know the right answer, we can do better by writing <emphasis role="bold">unit tests</emphasis>. </para>

  
  <para>JUnit is a common testing tool for Java programs (see <ulink url="https://junit.org/"/>). To use it, you have to create a test class that contains test methods. </para>

  
  <para>For example, suppose that the <literal moreinfo="none">fibonacci</literal> method belongs to a class named <literal moreinfo="none">Series</literal>. Here is the corresponding JUnit test class and test method: </para>
<programlisting language="java" format="linespecific">import junit.framework.TestCase;

public class SeriesTest extends TestCase {

    public void testFibonacci() {
        assertEquals(1, Series.fibonacci(1));
        assertEquals(1, Series.fibonacci(2));
        assertEquals(2, Series.fibonacci(3));
    }
}</programlisting><para>This example uses the keyword <literal moreinfo="none">extends</literal>, which indicates that the new class, <literal moreinfo="none">SeriesTest</literal> is based on an existing class, <literal moreinfo="none">TestCase</literal>. The <literal moreinfo="none">TestCase</literal> class is imported from the package <literal moreinfo="none">junit.framework</literal>. </para>

  
  <para>The names in this example follow convention: if the name of your class is <literal moreinfo="none">Something</literal>, the name of the test class should be <literal moreinfo="none">SomethingTest</literal>. And if there is a method in <literal moreinfo="none">Something</literal> named <literal moreinfo="none">someMethod</literal>, there should be a method in <literal moreinfo="none">SomethingTest</literal> named <literal moreinfo="none">testSomeMethod</literal>. </para>

  
  <para>Many development environments can generate test classes and test methods automatically. In DrJava, you can select New JUnit Test Case from the File menu to generate an empty test class. </para>

  
  <para><literal moreinfo="none">assertEquals</literal> is provided by the <literal moreinfo="none">TestCase</literal> class. It takes two arguments and checks whether they are equal. If so, it does nothing; otherwise it displays a detailed error message. The first argument is the “expected value”, which we consider correct, and the second argument is the “actual value” we want to check. If they are not equal, the test fails. </para>

  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>Using <literal moreinfo="none">assertEquals</literal> is more concise than writing your own <literal moreinfo="none">if</literal> statements and <literal moreinfo="none">System.err</literal> messages. JUnit provides additional assert methods, such as <literal moreinfo="none">assertNull</literal>, <literal moreinfo="none">assertSame</literal>, and <literal moreinfo="none">assertTrue</literal>, that can be used to design a variety of tests. </para>

  
  <para>To run JUnit directly from DrJava, click the Test button on the toolbar. If all your test methods pass, you will see a green bar in the lower-right corner. Otherwise, DrJava will take you directly to the first assertion that failed. </para>

</sect1><sect1 id="a0000014404" remap="section">
  <title>Vocabulary</title>
    <variablelist>
  <varlistentry>
    <term>IDE:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>An “integrated development environment” that includes tools for editing, compiling, and debugging programs. </para>
</listitem>
  </varlistentry><varlistentry>
    <term>JDK:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>The “Java Development Kit” that contains the compiler, Javadoc, and other tools. </para>
</listitem>
  </varlistentry><varlistentry>
    <term>JVM:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>The “Java Virtual Machine” that interprets the compiled byte code. </para>
</listitem>
  </varlistentry><varlistentry>
    <term>text editor:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>A program that edits plain text files, the format used by most programming languages. </para>
</listitem>
  </varlistentry><varlistentry>
    <term>JAR:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>A “Java Archive”, which is essentially a ZIP file containing classes and other resources. </para>
</listitem>
  </varlistentry><varlistentry>
    <term>command-line interface:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>A means of interacting with the computer by issuing commands in the form of successive lines of text. </para>
</listitem>
  </varlistentry><varlistentry>
    <term>redirection operator:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>A command-line feature that substitutes <literal moreinfo="none">System.in</literal> and/or <literal moreinfo="none">System.out</literal> with a plain text file. </para>
</listitem>
  </varlistentry><varlistentry>
    <term>wildcard:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>A command-line feature that allows you to specify a pattern of filenames using the <literal moreinfo="none">*</literal> character. </para>
</listitem>
  </varlistentry><varlistentry>
    <term>debugger:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>A tool that allows you to run one statement at a time and see the contents of variables. </para>
</listitem>
  </varlistentry><varlistentry>
    <term>breakpoint:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>A line of code where the debugger will pause a running program. </para>
</listitem>
  </varlistentry><varlistentry>
    <term>call stack:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>The history of method calls and where to resume execution after each method returns. </para>
</listitem>
  </varlistentry><varlistentry>
    <term>unit test:</term>
      <listitem>
  
  <para><indexterm significance="normal">
  <primary></primary>

</indexterm>Code that exercises a single method of a program, testing for correctness and/or efficiency. </para>
</listitem>
  </varlistentry>
</variablelist>
</sect1>
</appendix>

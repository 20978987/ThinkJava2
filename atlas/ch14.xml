<chapter id="eights">
  <title>Extending Classes</title><para><indexterm significance="normal">
  <primary>Crazy Eights</primary>

</indexterm>In this chapter, we will present a comprehensive example of object-oriented programming. <emphasis>Crazy Eights</emphasis> is a classic card game for two or more players. The main objective is to be the first player to get rid of all your cards. Here’s how to play: </para><itemizedlist>
  
    <listitem><para>Deal five or more cards to each player, and then deal one card face up to create the “discard pile”. Place the remaining cards face down to create the “draw pile”. </para></listitem>
  
    <listitem><para>Each player takes turns placing a single card on the discard pile. The card must match the rank or suit of the previously played card, or be an eight, which is a “wild card”. </para></listitem>
  
    <listitem><para>When players don’t have a matching card or an eight, they must draw new cards until they get one. </para></listitem>
  
    <listitem><para>If the draw pile ever runs out, the discard pile is shuffled (except the top card) and becomes the new draw pile. </para></listitem>
  
    <listitem><para>As soon as a player has no cards, the game ends and all other players score penalty points for their remaining cards. Eights are worth 20, face cards are worth 10, and all others are worth their rank. </para></listitem>
  
</itemizedlist><para>You can read <ulink url="https://en.wikipedia.org/wiki/Crazy_Eights"/> for more details, but we have enough to get started. </para><sect1 id="a0000008253" remap="section">
  <title>CardCollection</title>
    <para>To implement <emphasis>Crazy Eights</emphasis>, we need to represent a deck of cards, a discard pile, a draw pile, and a hand for each player. And we need to be able to deal, draw, and discard cards. </para><para>The <literal remap="verb" moreinfo="none">Deck</literal> and <literal remap="verb" moreinfo="none">Pile</literal> classes from the previous chapter meet some of these requirements. But unless we make some changes, neither of them can be used to represent a hand of cards that well. </para><para><indexterm significance="normal">
  <primary>ArrayList</primary>

</indexterm>Furthermore, <literal remap="verb" moreinfo="none">Deck</literal> and <literal remap="verb" moreinfo="none">Pile</literal> are essentially two versions of the same code: one based on arrays, and the other based on <literal remap="verb" moreinfo="none">ArrayList</literal>. It would be helpful to combine their features into one class that meets the needs of both. </para><para><indexterm significance="normal">
  <primary>CardCollection</primary>

</indexterm><indexterm significance="normal">
  <primary>class</primary>
<secondary>CardCollection</secondary>
</indexterm>We will define a class named <literal remap="verb" moreinfo="none">CardCollection</literal> and add the code we want one step at a time. Since this class will represent different piles and hands of cards, we’ll add a <literal remap="verb" moreinfo="none">label</literal> attribute to tell them apart. </para><programlisting language="java" format="linespecific">public class CardCollection {

    private String label;
    private ArrayList&lt;Card&gt; cards;

    public CardCollection(String label) {
        this.label = label;
        this.cards = new ArrayList&lt;Card&gt;();
    }
}</programlisting><para>As with the <literal remap="verb" moreinfo="none">Pile</literal> class, we need a way to add cards to the collection. Here is the <literal remap="verb" moreinfo="none">addCard</literal> method from the previous chapter: </para><programlisting language="java" format="linespecific">public void addCard(Card card) {
    this.cards.add(card);
}</programlisting><para><indexterm significance="normal">
  <primary>this</primary>

</indexterm>Until now, we have used <literal remap="verb" moreinfo="none">this</literal> explicitly to make it easy to identify attributes. Inside <literal remap="verb" moreinfo="none">addCard</literal> and other instance methods, you can access instance variables without using the keyword <literal remap="verb" moreinfo="none">this</literal>. So from here on, we will drop it: </para><programlisting language="java" format="linespecific">public void addCard(Card card) {
    cards.add(card);
}</programlisting><para>We also need to be able to remove cards from the collection. The following method takes an index, removes the card at that location, and shifts the following cards left to fill the gap: </para><programlisting language="java" format="linespecific">public Card popCard(int i) {
    return cards.remove(i);
}</programlisting><para><indexterm significance="normal">
  <primary>efficiency</primary>

</indexterm>If we are dealing cards from a shuffled deck, we don’t care which card gets removed. It is most efficient to choose the last one, so we don’t have to shift any cards left. Here is an overloaded version of <literal remap="verb" moreinfo="none">popCard</literal> that removes and returns the last card: </para><programlisting language="java" format="linespecific">public Card popCard() {
    int i = size() - 1;     // from the end of the collection
    return popCard(i);
}</programlisting><para>Notice that <literal remap="verb" moreinfo="none">popCard</literal> uses <literal remap="verb" moreinfo="none">CardCollection</literal>’s own <literal remap="verb" moreinfo="none">size</literal> method, which in turn calls the <literal remap="verb" moreinfo="none">ArrayList</literal>’s <literal remap="verb" moreinfo="none">size</literal> method: </para><programlisting language="java" format="linespecific">public int size() {
    return cards.size();
}</programlisting><para>For convenience, <literal remap="verb" moreinfo="none">CardCollection</literal> also provides an <literal remap="verb" moreinfo="none">empty</literal> method that returns <literal remap="verb" moreinfo="none">true</literal> when <literal remap="verb" moreinfo="none">size</literal> is zero: </para><programlisting language="java" format="linespecific">public boolean empty() {
    return cards.size() == 0;
}</programlisting><para>To access the elements of an <literal remap="verb" moreinfo="none">ArrayList</literal>, you can’t use the array <literal remap="verb" moreinfo="none">[]</literal> operator. Instead, you have to use the methods <literal remap="verb" moreinfo="none">get</literal> and <literal remap="verb" moreinfo="none">set</literal>. Here is a wrapper for <literal remap="verb" moreinfo="none">get</literal>: </para><programlisting language="java" format="linespecific">public Card getCard(int i) {
    return cards.get(i);
}</programlisting><para>The <literal remap="verb" moreinfo="none">lastCard</literal> method gets the last card (but doesn’t remove it): </para><programlisting language="java" format="linespecific">public Card lastCard() {
    int i = size() - 1;
    return cards.get(i);
}</programlisting><para><indexterm significance="normal">
  <primary>modifier method</primary>

</indexterm><indexterm significance="normal">
  <primary>method</primary>
<secondary>modifier</secondary>
</indexterm>In order to control the ways card collections are modified, we don’t provide a wrapper for <literal remap="verb" moreinfo="none">set</literal>. The only modifiers we provide are the two versions of <literal remap="verb" moreinfo="none">popCard</literal> and the following version of <literal remap="verb" moreinfo="none">swapCards</literal>: </para><programlisting language="java" format="linespecific">public void swapCards(int i, int j) {
    Card temp = cards.get(i);
    cards.set(i, cards.get(j));
    cards.set(j, temp);
}</programlisting><para>We use <literal remap="verb" moreinfo="none">swapCards</literal> to implement <literal remap="verb" moreinfo="none">shuffle</literal>, which we described in <xref linkend="shuffle"/>: </para><programlisting language="java" format="linespecific">public void shuffle() {
    Random random = new Random();
    for (int i = size() - 1; i &gt; 0; i--) {
        int j = random.nextInt(i + 1);
        swapCards(i, j);
    }
}</programlisting></sect1><sect1 id="a0000008332" remap="section">
  <title>Inheritance</title>
    <para>At this point we have a class that represents a collection of cards. It provides functionality common to decks of cards, piles of cards, hands of cards, and potentially other collections. </para><para><indexterm significance="normal">
  <primary>inheritance</primary>

</indexterm><indexterm significance="normal">
  <primary>subclass</primary>

</indexterm><indexterm significance="normal">
  <primary>extends</primary>

</indexterm>However, each kind of collection will be slightly different. Rather than add every possible feature to <literal remap="verb" moreinfo="none">CardCollection</literal>, we can use <emphasis role="bold">inheritance</emphasis> to define subclasses. A <emphasis role="bold">subclass</emphasis> is a class that “extends” an existing class; that is, it has the attributes and methods of the existing class, plus more. </para><para>Here is the complete definition of our new and improved <literal remap="verb" moreinfo="none">Deck</literal> class: </para><programlisting language="java" format="linespecific">public class Deck extends CardCollection {

    public Deck(String label) {
        super(label);
        for (int suit = 0; suit &lt;= 3; suit++) {
            for (int rank = 1; rank &lt;= 13; rank++) {
                addCard(new Card(rank, suit));
            }
        }
    }
}</programlisting><para><indexterm significance="normal">
  <primary>extends</primary>

</indexterm><indexterm significance="normal">
  <primary>superclass</primary>

</indexterm>The first line uses the keyword <literal remap="verb" moreinfo="none">extends</literal> to indicate that <literal remap="verb" moreinfo="none">Deck</literal> extends the class <literal remap="verb" moreinfo="none">CardCollection</literal>. That means a <literal remap="verb" moreinfo="none">Deck</literal> object has the same instance variables and methods as a <literal remap="verb" moreinfo="none">CardCollection</literal>. Another way to say the same thing is that <literal remap="verb" moreinfo="none">Deck</literal> “inherits from” <literal remap="verb" moreinfo="none">CardCollection</literal>. We could also say that <literal remap="verb" moreinfo="none">CardCollection</literal> is a <emphasis role="bold">superclass</emphasis>, and <literal remap="verb" moreinfo="none">Deck</literal> is one of its subclasses. </para><para><indexterm significance="normal">
  <primary>Object class</primary>

</indexterm>In Java, classes may only extend one superclass. Classes that do not specify a superclass with <literal remap="verb" moreinfo="none">extends</literal> automatically inherit from <literal remap="verb" moreinfo="none">java.lang.Object</literal>. So in this example, <literal remap="verb" moreinfo="none">Deck</literal> extends <literal remap="verb" moreinfo="none">CardCollection</literal>, which in turn extends <literal remap="verb" moreinfo="none">Object</literal>. The <literal remap="verb" moreinfo="none">Object</literal> class provides the default <literal remap="verb" moreinfo="none">equals</literal> and <literal remap="verb" moreinfo="none">toString</literal> methods, among other things. </para><para>Constructors are <emphasis>not</emphasis> inherited, but all other <literal remap="verb" moreinfo="none">public</literal> attributes and methods are. The only additional method in <literal remap="verb" moreinfo="none">Deck</literal>, at least for now, is a constructor. So you can create a <literal remap="verb" moreinfo="none">Deck</literal> object like this: </para><programlisting language="java" format="linespecific">Deck deck = new Deck("Deck");</programlisting><para>The first line of the constructor uses <literal remap="verb" moreinfo="none">super</literal>, which is a keyword that refers to the superclass of the current class. When <literal remap="verb" moreinfo="none">super</literal> is used like a method, as in this example, it invokes the constructor of the superclass. </para><para>So in this case, <literal remap="verb" moreinfo="none">super</literal> invokes the <literal remap="verb" moreinfo="none">CardCollection</literal> constructor, which initializes the attributes <literal remap="verb" moreinfo="none">label</literal> and <literal remap="verb" moreinfo="none">cards</literal>. When it returns, the <literal remap="verb" moreinfo="none">Deck</literal> constructor resumes and populates the (empty) <literal remap="verb" moreinfo="none">ArrayList</literal> with <literal remap="verb" moreinfo="none">Card</literal> objects. </para><para><indexterm significance="normal">
  <primary>Hand</primary>

</indexterm><indexterm significance="normal">
  <primary>class</primary>
<secondary>Hand</secondary>
</indexterm>That’s it for the <literal remap="verb" moreinfo="none">Deck</literal> class. Next we need a way to represent a hand, which is the collection of cards held by a player, and a pile, which is a collection of cards on the table. We could define two classes, one for hands and one for piles, but there is not much difference between them. So we’ll use one class, called <literal remap="verb" moreinfo="none">Hand</literal>, for both hands and piles. Here’s what the definition looks like: </para><programlisting language="java" format="linespecific">public class Hand extends CardCollection {

    public Hand(String label) {
        super(label);
    }

    public void display() {
        System.out.println(getLabel() + ": ");
        for (int i = 0; i &lt; size(); i++) {
            System.out.println(getCard(i));
        }
        System.out.println();
    }
}</programlisting><para>Like <literal remap="verb" moreinfo="none">Deck</literal>, the <literal remap="verb" moreinfo="none">Hand</literal> class extends <literal remap="verb" moreinfo="none">CardCollection</literal>. So it inherits methods like <literal remap="verb" moreinfo="none">getLabel</literal>, <literal remap="verb" moreinfo="none">size</literal>, and <literal remap="verb" moreinfo="none">getCard</literal>, which are used in <literal remap="verb" moreinfo="none">display</literal>. <literal remap="verb" moreinfo="none">Hand</literal> also provides a constructor, which invokes the constructor of <literal remap="verb" moreinfo="none">CardCollection</literal>. </para><para>In summary, a <literal remap="verb" moreinfo="none">Deck</literal> is just like a <literal remap="verb" moreinfo="none">CardCollection</literal>, but it provides a different constructor. And a <literal remap="verb" moreinfo="none">Hand</literal> is just like a <literal remap="verb" moreinfo="none">CardCollection</literal>, but it provides an additional method, <literal remap="verb" moreinfo="none">display</literal>. </para>
</sect1><sect1 id="dealing" remap="section">
  <title>Dealing Cards</title><para>To begin the game, we need to deal cards to each of the players. And during the game, we need to move cards between hands and piles. If we add the following method to <literal remap="verb" moreinfo="none">CardCollection</literal>, it can meet both of these requirements. </para><programlisting language="java" format="linespecific">public void deal(CardCollection that, int n) {
    for (int i = 0; i &lt; n; i++) {
        Card card = popCard();
        that.addCard(card);
    }
}</programlisting><para>The <literal remap="verb" moreinfo="none">deal</literal> method removes cards from the collection it is invoked on, <literal remap="verb" moreinfo="none">this</literal>, and adds them to the collection it gets as a parameter, <literal remap="verb" moreinfo="none">that</literal>. The second parameter, <literal remap="verb" moreinfo="none">n</literal>, is the number of cards to deal. We will use this method to implement <literal remap="verb" moreinfo="none">dealAll</literal>, which deals (or moves) all of the remaining cards. </para><programlisting language="java" format="linespecific">public void dealAll(CardCollection that) {
    int n = size();
    deal(that, n);
}</programlisting><para>At this point we can create a <literal remap="verb" moreinfo="none">Deck</literal> and start dealing cards. Here’s a simple example that deals five cards to a hand, and deals the rest into a draw pile: </para><programlisting language="java" format="linespecific">Deck deck = new Deck("Deck");
deck.shuffle();

Hand hand = new Hand("Hand");
deck.deal(hand, 5);
hand.display();

Hand drawPile = new Hand("Draw Pile");
deck.dealAll(drawPile);
System.out.printf("Draw Pile has %d cards.\n",
                  drawPile.size());</programlisting><para>Because the deck is shuffled randomly, you should get a different hand each time you run this example. The output will look something like: </para><programlisting format="linespecific">Hand:
5 of Diamonds
Ace of Hearts
6 of Clubs
6 of Diamonds
2 of Clubs

Draw Pile has 47 cards.</programlisting><para>If you are a careful reader, you might notice something strange about this example. Take another look at the definition of <literal remap="verb" moreinfo="none">deal</literal>. Notice that the first parameter is supposed to be a <literal remap="verb" moreinfo="none">CardCollection</literal>. But we invoked it like this: </para><programlisting language="java" format="linespecific">Hand hand = new Hand("Hand");
deck.deal(hand, 5);</programlisting><para>The argument is a <literal remap="verb" moreinfo="none">Hand</literal>, not a <literal remap="verb" moreinfo="none">CardCollection</literal>. So why is this example legal? </para><para>It’s because <literal remap="verb" moreinfo="none">Hand</literal> is a subclass of <literal remap="verb" moreinfo="none">CardCollection</literal>, so a <literal remap="verb" moreinfo="none">Hand</literal> object is also considered to be a <literal remap="verb" moreinfo="none">CardCollection</literal> object. If a method expects a <literal remap="verb" moreinfo="none">CardCollection</literal>, you can give it a <literal remap="verb" moreinfo="none">Hand</literal>, a <literal remap="verb" moreinfo="none">Deck</literal>, or a <literal remap="verb" moreinfo="none">CardCollection</literal>. </para><para>But it doesn’t work the other way around: not every <literal remap="verb" moreinfo="none">CardCollection</literal> is a <literal remap="verb" moreinfo="none">Hand</literal>, so if a method expects a <literal remap="verb" moreinfo="none">Hand</literal>, you have to give it a <literal remap="verb" moreinfo="none">Hand</literal>, not a <literal remap="verb" moreinfo="none">CardCollection</literal> or a <literal remap="verb" moreinfo="none">Deck</literal>. </para><para>If it seems strange that an object can belong to more than one type, remember that this happens in real life, too. Every cat is also a mammal, and every mammal is also an animal. But not every animal is a mammal, and not every mammal is a cat. </para>
</sect1><sect1 id="a0000008455" remap="section">
  <title>The Player Class</title>
    <para>The <literal remap="verb" moreinfo="none">Deck</literal> and <literal remap="verb" moreinfo="none">Hand</literal> classes we have defined so far could be used for any card game; we have not yet implemented any of the rules specific to <emphasis>Crazy Eights</emphasis>. And that’s probably a good thing, since it makes it easy to reuse these classes if we want to make another game in the future. </para><para><indexterm significance="normal">
  <primary>Player</primary>

</indexterm><indexterm significance="normal">
  <primary>class</primary>
<secondary>Player</secondary>
</indexterm>But now it’s time to implement the rules. We’ll use two classes: <literal remap="verb" moreinfo="none">Player</literal>, which encapsulates player strategy, and <literal remap="verb" moreinfo="none">Eights</literal>, which creates and maintains the state of the game. Here is the beginning of the <literal remap="verb" moreinfo="none">Player</literal> definition: </para><programlisting language="java" format="linespecific">public class Player {

    private String name;
    private Hand hand;

    public Player(String name) {
        this.name = name;
        this.hand = new Hand(name);
    }</programlisting><para>A <literal remap="verb" moreinfo="none">Player</literal> has two <literal remap="verb" moreinfo="none">private</literal> attributes: a name and a hand. The constructor takes the player’s name as a string and saves it in an instance variable. In this example, we have to use <literal remap="verb" moreinfo="none">this</literal> to distinguish between the instance variable and the parameter with the same name. </para><para>The primary method that <literal remap="verb" moreinfo="none">Player</literal> provides is <literal remap="verb" moreinfo="none">play</literal>, which decides which card to discard during each turn: </para><programlisting language="java" format="linespecific">public Card play(Eights eights, Card prev) {
    Card card = searchForMatch(prev);
    if (card == null) {
        card = drawForMatch(eights, prev);
    }
    return card;
}</programlisting><para>The first parameter is a reference to the <literal remap="verb" moreinfo="none">Eights</literal> object that encapsulates the state of the game. We’ll need it if we have to draw a new card. The second parameter, <literal remap="verb" moreinfo="none">prev</literal>, is the card on top of the discard pile. </para><para><indexterm significance="normal">
  <primary>top-down development</primary>

</indexterm>Using top-down development, the <literal remap="verb" moreinfo="none">play</literal> method invokes two helper methods, <literal remap="verb" moreinfo="none">searchForMatch</literal> and <literal remap="verb" moreinfo="none">drawForMatch</literal>. The first method looks in the player’s hand for a card that matches the previously played card: </para><programlisting language="java" format="linespecific">public Card searchForMatch(Card prev) {
    for (int i = 0; i &lt; hand.size(); i++) {
        Card card = hand.getCard(i);
        if (cardMatches(card, prev)) {
            return hand.popCard(i);
        }
    }
    return null;
}</programlisting><para>The strategy is pretty simple: the <literal remap="verb" moreinfo="none">for</literal> loop searches for the first card that’s legal to play and returns it. If there are no cards that match, it returns <literal remap="verb" moreinfo="none">null</literal>. And in that case, we have to draw cards until we get a match. </para><programlisting language="java" format="linespecific">public Card drawForMatch(Eights eights, Card prev) {
    while (true) {
        Card card = eights.drawCard();
        System.out.println(name + " draws " + card);
        if (cardMatches(card, prev)) {
            return card;
        }
        hand.addCard(card);
    }
}</programlisting><para>The <literal remap="verb" moreinfo="none">while</literal> loop runs until it finds a match (we’ll assume for now that it always does). It uses the <literal remap="verb" moreinfo="none">Eights</literal> object to draw a card. If it matches, it returns the card. Otherwise it adds the card to the player’s hand and repeats. </para><para>Both <literal remap="verb" moreinfo="none">searchForMatch</literal> and <literal remap="verb" moreinfo="none">drawForMatch</literal> use <literal remap="verb" moreinfo="none">cardMatches</literal>, which is a static method, also defined in <literal remap="verb" moreinfo="none">Player</literal>. This method is a straightforward translation of the rules of the game: </para><programlisting language="java" format="linespecific">public static boolean cardMatches(Card card1, Card card2) {
    return card1.getSuit() == card2.getSuit()
        || card1.getRank() == card2.getRank()
        || card1.getRank() == 8;
}</programlisting><para>Finally, <literal remap="verb" moreinfo="none">Player</literal> provides a <literal remap="verb" moreinfo="none">score</literal> method, which computes penalty points for cards left in a player’s hand at the end of the game. </para>
</sect1><sect1 id="a0000008505" remap="section">
  <title>The Eights Class</title>
    <para><indexterm significance="normal">
  <primary>top-down development</primary>

</indexterm>In <xref linkend="shuffle"/> we introduced top-down development, which is a way of developing programs by identifying high-level goals, like shuffling a deck, and breaking them into smaller problems, like finding the lowest element in an array or swapping two elements. </para><para><indexterm significance="normal">
  <primary>bottom-up design</primary>

</indexterm><indexterm significance="normal">
  <primary>design process</primary>

</indexterm>In this section we present <emphasis role="bold">bottom-up design</emphasis>, which goes the other way around: first we identify simple pieces we need, then we assemble them into more complex algorithms. </para><para>Looking at the rules of <emphasis>Crazy Eights</emphasis>, we can identify some of the methods we’ll need: </para><itemizedlist>
  
    <listitem><para>Create the deck, the players, and the discard and draw piles. Deal the cards and set up the game. (<literal remap="verb" moreinfo="none">Eights</literal> constructor) </para></listitem>
  
    <listitem><para>Check whether the game is over. (<literal remap="verb" moreinfo="none">isDone</literal>) </para></listitem>
  
    <listitem><para>If the draw pile is empty, shuffle the discard pile and move the cards into the draw pile. (<literal remap="verb" moreinfo="none">reshuffle</literal>) </para></listitem>
  
    <listitem><para>Draw a card, reshuffling the discard pile if necessary. (<literal remap="verb" moreinfo="none">drawCard</literal>) </para></listitem>
  
    <listitem><para>Keep track of whose turn it is, and switch from one player to the next. (<literal remap="verb" moreinfo="none">nextPlayer</literal>) </para></listitem>
  
    <listitem><para>Display the state of the game, and wait for the user before running the next turn. (<literal remap="verb" moreinfo="none">displayState</literal>) </para></listitem>
  
</itemizedlist><para><indexterm significance="normal">
  <primary>Eights</primary>

</indexterm><indexterm significance="normal">
  <primary>class</primary>
<secondary>Eights</secondary>
</indexterm>Now we can start implementing the pieces. Here is the beginning of the class definition for <literal remap="verb" moreinfo="none">Eights</literal>, which encapsulates the state of the game: </para><programlisting language="java" format="linespecific">public class Eights {

    private Player one;
    private Player two;
    private Hand drawPile;
    private Hand discardPile;
    private Scanner in;</programlisting><para>In this version, there are always two players. One of the exercises at the end of the chapter asks you to modify this code to handle more players. The <literal remap="verb" moreinfo="none">Eights</literal> class also includes a draw pile, a discard pile, and a <literal remap="verb" moreinfo="none">Scanner</literal>, which we will use to prompt the user after each turn. </para><para>The constructor for <literal remap="verb" moreinfo="none">Eights</literal> initializes the instance variables and deals the cards, similar to <xref linkend="dealing"/>. The next piece we’ll need is a method that checks whether the game is over. If either hand is empty, we’re done: </para><programlisting language="java" format="linespecific">public boolean isDone() {
    return one.getHand().empty() || two.getHand().empty();
}</programlisting><para>When the draw pile is empty, we have to shuffle the discard pile. Here is a method for that: </para><programlisting language="java" format="linespecific">public void reshuffle() {
    Card prev = discardPile.popCard();
    discardPile.dealAll(drawPile);
    discardPile.addCard(prev);
    drawPile.shuffle();
}</programlisting><para>The first line saves the top card from <literal remap="verb" moreinfo="none">discardPile</literal>. The next line transfers the rest of the cards to <literal remap="verb" moreinfo="none">drawPile</literal>. Then we put the saved card back into <literal remap="verb" moreinfo="none">discardPile</literal> and shuffle <literal remap="verb" moreinfo="none">drawPile</literal>. We can use <literal remap="verb" moreinfo="none">reshuffle</literal> as part of the <literal remap="verb" moreinfo="none">draw</literal> method: </para><programlisting language="java" format="linespecific">public Card drawCard() {
    if (drawPile.empty()) {
        reshuffle();
    }
    return drawPile.popCard();
}</programlisting><para>The <literal remap="verb" moreinfo="none">nextPlayer</literal> method takes the current player as a parameter and returns the player who should go next. </para><programlisting language="java" format="linespecific">public Player nextPlayer(Player current) {
    if (current == one) {
        return two;
    } else {
        return one;
    }
}</programlisting><para>The last method from our bottom-up design is <literal remap="verb" moreinfo="none">displayState</literal>. It displays the hand of each player, the contents of the discard pile, and how many cards are in the draw pile. Finally, it waits for the user to press the Enter key. </para><para>Using these pieces, we can write <literal remap="verb" moreinfo="none">takeTurn</literal>, which executes one player’s turn. It reads the top card off the discard pile and passes it to <literal remap="verb" moreinfo="none">player.play</literal>, which we saw in the previous section. The result is the card the player chose, which is added to the discard pile. </para><programlisting language="java" format="linespecific">public void takeTurn(Player player) {
    Card prev = discardPile.lastCard();
    Card next = player.play(this, prev);
    discardPile.addCard(next);

    System.out.println(player.getName() + " plays " + next);
    System.out.println();
}</programlisting><para>Finally, we use <literal remap="verb" moreinfo="none">takeTurn</literal> and the other methods to write <literal remap="verb" moreinfo="none">playGame</literal>: </para><programlisting language="java" format="linespecific">public void playGame() {
    Player player = one;

    // keep playing until there's a winner
    while (!isDone()) {
        displayState();
        takeTurn(player);
        player = nextPlayer(player);
    }

    // display the final score
    one.displayScore();
    two.displayScore();
}</programlisting><para>Done! Notice the result of bottom-up design is similar to top-down: we have a high-level method that calls helper methods. The main difference is the order we used to arrive at this solution. </para>
</sect1><sect1 id="a0000008582" remap="section">
  <title>Class Relationships</title>
    <para><indexterm significance="normal">
  <primary>class</primary>
<secondary>relationships</secondary>
</indexterm>This chapter demonstrates two common relationships between classes: </para><variablelist>
  <varlistentry>
    <term>composition:</term>
      <listitem><para><indexterm significance="normal">
  <primary>composition</primary>

</indexterm>Instances of one class contain references to instances of another class. For example, an instance of <literal remap="verb" moreinfo="none">Eights</literal> contains references to two <literal remap="verb" moreinfo="none">Player</literal> objects, two <literal remap="verb" moreinfo="none">Hand</literal> objects, and a <literal remap="verb" moreinfo="none">Scanner</literal>. </para></listitem>
  </varlistentry><varlistentry>
    <term>inheritance:</term>
      <listitem><para><indexterm significance="normal">
  <primary>inheritance</primary>

</indexterm>One class extends another class. For example, <literal remap="verb" moreinfo="none">Hand</literal> extends <literal remap="verb" moreinfo="none">CardCollection</literal>, so every instance of <literal remap="verb" moreinfo="none">Hand</literal> is also a <literal remap="verb" moreinfo="none">CardCollection</literal>. </para></listitem>
  </varlistentry>
</variablelist><para><indexterm significance="normal">
  <primary>HAS-A</primary>

</indexterm><indexterm significance="normal">
  <primary>IS-A</primary>

</indexterm><indexterm significance="normal">
  <primary>object-oriented</primary>

</indexterm>Composition is also known as a <emphasis role="bold">HAS-A</emphasis> relationship, as in “<literal remap="verb" moreinfo="none">Eights</literal> HAS-A <literal remap="verb" moreinfo="none">Scanner</literal>”. Inheritance is also known as an <emphasis role="bold">IS-A</emphasis> relationship, as in “a <literal remap="verb" moreinfo="none">Hand</literal> IS-A <literal remap="verb" moreinfo="none">CardCollection</literal>”. This vocabulary provides a concise way to talk about an object-oriented design. </para><para><indexterm significance="normal">
  <primary>UML</primary>

</indexterm><indexterm significance="normal">
  <primary>class diagram</primary>

</indexterm><indexterm significance="normal">
  <primary>diagram</primary>
<secondary>class</secondary>
</indexterm>There is also a standard way to represent these relationships graphically in UML class diagrams. As we saw in <xref linkend="UML"/>, the UML representation of a class is a box with three sections: the class name, the attributes, and the methods. The latter two sections are optional when showing relationships. </para><para>Relationships between classes are represented by arrows: composition arrows have a standard arrow head, and inheritance arrows have a hollow triangle head (usually pointing up). <xref linkend="fig.uml1"/> shows the classes defined in this chapter and the relationships among them. </para>
  
  <figure id="fig.uml1" float="False">
    <title>UML diagram for the classes in this chapter.</title>
     <mediaobject>
  <imageobject remap="includegraphics">
    <imagedata fileref="figs/uml1.pdf"></imagedata>
  </imageobject>
</mediaobject></figure>
<para>UML is an international standard, so almost any software engineer in the world could look at this diagram and understand our design. And class diagrams are only one of many graphical representations defined in the UML standard. </para>
</sect1><sect1 id="a0000008624" remap="section">
  <title>Vocabulary</title>
    <variablelist>
  <varlistentry>
    <term>inheritance:</term>
      <listitem><para><indexterm significance="normal">
  <primary>inheritance</primary>

</indexterm>The ability to define a new class that has the same instance variables and methods of an existing class. </para></listitem>
  </varlistentry><varlistentry>
    <term>subclass:</term>
      <listitem><para><indexterm significance="normal">
  <primary>subclass</primary>

</indexterm>A class that inherits from, or extends, an existing class. </para></listitem>
  </varlistentry><varlistentry>
    <term>superclass:</term>
      <listitem><para><indexterm significance="normal">
  <primary>superclass</primary>

</indexterm>An existing class that is extended by another class. </para></listitem>
  </varlistentry><varlistentry>
    <term>bottom-up design:</term>
      <listitem><para><indexterm significance="normal">
  <primary>bottom-up design</primary>

</indexterm>A way of developing programs by identifying simple pieces, implementing them, and then assembling them into more complex algorithms. </para></listitem>
  </varlistentry><varlistentry>
    <term>HAS-A:</term>
      <listitem><para><indexterm significance="normal">
  <primary>HAS-A</primary>

</indexterm>A relationship between two classes where one class “has” an instance of another class as one of its attributes. </para></listitem>
  </varlistentry><varlistentry>
    <term>IS-A:</term>
      <listitem><para><indexterm significance="normal">
  <primary>IS-A</primary>

</indexterm>A relationship between two classes where one class extends another class; the subclass “is” an instance of the superclass. </para></listitem>
  </varlistentry>
</variablelist>
</sect1><sect1 id="a0000008639" remap="section">
  <title>Exercises</title>
    <para>The code for this chapter is in the <literal moreinfo="none">ch14</literal> directory of <literal moreinfo="none">ThinkJavaCode2</literal>. See <xref linkend="code"/> for instructions on how to download the repository. Before you start the exercises, we recommend that you compile and run the examples. </para><para><example id="a0000008648" role="exercise">
  <title/>
  <para>Design a better strategy for the <literal remap="verb" moreinfo="none">Player.play</literal> method. For example, if there are multiple cards you can play, and one of them is an eight, you might want to play the eight. </para><para><indexterm significance="normal">
  <primary>override</primary>

</indexterm>Think of other ways you can minimize penalty points, such as playing the highest-ranking cards first. Write a new class that extends <literal remap="verb" moreinfo="none">Player</literal> and overrides <literal remap="verb" moreinfo="none">play</literal> to implement your strategy. </para>
</example> </para><para><example id="a0000008656" role="exercise">
  <title/>
  <para>Write a loop that plays the game 100 times and keeps track of how many times each player wins. If you implemented multiple strategies in the previous exercise, you can play them against each other to evaluate which one works best. </para><para><emphasis>Hint:</emphasis> Design a <literal remap="verb" moreinfo="none">Genius</literal> class that extends <literal remap="verb" moreinfo="none">Player</literal> and overrides the <literal remap="verb" moreinfo="none">play</literal> method, and then replace one of the players with a <literal remap="verb" moreinfo="none">Genius</literal> object. </para>
</example> </para><para><example id="a0000008666" role="exercise">
  <title/>
  <para>One limitation of the program we wrote in this chapter is that it only handles two players. Modify the <literal remap="verb" moreinfo="none">Eights</literal> class to create an <literal remap="verb" moreinfo="none">ArrayList</literal> of players, and modify <literal remap="verb" moreinfo="none">nextPlayer</literal> to select the next player. </para>
</example> </para><para><example id="a0000008672" role="exercise">
  <title/>
  <para>When we designed the program for this chapter, we tried to minimize the number of classes. As a result, we ended up with a few awkward methods. For example, <literal remap="verb" moreinfo="none">cardMatches</literal> is a static method in <literal remap="verb" moreinfo="none">Player</literal>, but it would be more natural if it were an instance method in <literal remap="verb" moreinfo="none">Card</literal>. </para><para>The problem is that <literal remap="verb" moreinfo="none">Card</literal> is supposed to be useful for any card game, not just <emphasis>Crazy Eights</emphasis>. You can solve this problem by adding a new class, <literal remap="verb" moreinfo="none">EightsCard</literal>, that extends <literal remap="verb" moreinfo="none">Card</literal> and provides a method, <literal remap="verb" moreinfo="none">match</literal>, that checks whether two cards match according to the rules of <emphasis>Crazy Eights</emphasis>. </para><para>At the same time, you could create a new class, <literal remap="verb" moreinfo="none">EightsHand</literal>, that extends <literal remap="verb" moreinfo="none">Hand</literal> and provides a method, <literal remap="verb" moreinfo="none">scoreHand</literal>, that adds up the scores of the cards in the hand. And while you’re at it, you could add a method named <literal remap="verb" moreinfo="none">scoreCard</literal> to <literal remap="verb" moreinfo="none">EightsCard</literal>. </para><para>Whether or not you actually make these changes, draw a UML class diagram that shows this alternative object hierarchy. </para>
</example> </para>
</sect1>
</chapter>
